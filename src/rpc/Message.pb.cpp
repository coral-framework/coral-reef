// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Exception_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Exception_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Exception_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Invocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Invocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Container_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Container_reflection_ = NULL;
const ::google::protobuf::Descriptor* Any_Type_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Any_Type_reflection_ = NULL;
const ::google::protobuf::Descriptor* Complex_Type_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Complex_Type_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ref_Type_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ref_Type_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Ref_Type_Owner_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Message_2eproto() {
  protobuf_AddDesc_Message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Message.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, requester_endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, invocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, ret_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, ret_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, exception_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_Type_descriptor_ = Message_descriptor_->enum_type(0);
  Request_descriptor_ = file->message_type(1);
  static const int Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, instance_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, lookup_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, lease_instance_id_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Exception_descriptor_ = file->message_type(2);
  static const int Exception_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exception, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exception, type_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exception, what_),
  };
  Exception_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Exception_descriptor_,
      Exception::default_instance_,
      Exception_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exception, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exception, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Exception));
  Exception_Type_descriptor_ = Exception_descriptor_->enum_type(0);
  Invocation_descriptor_ = file->message_type(3);
  static const int Invocation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invocation, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invocation, facet_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invocation, member_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invocation, type_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invocation, synch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invocation, params_),
  };
  Invocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Invocation_descriptor_,
      Invocation::default_instance_,
      Invocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Invocation));
  Parameter_descriptor_ = file->message_type(4);
  static const int Parameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, container_),
  };
  Parameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parameter_descriptor_,
      Parameter::default_instance_,
      Parameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parameter));
  Container_descriptor_ = file->message_type(5);
  static const int Container_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, boolean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, numeric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, complex_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, any_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, ref_type_),
  };
  Container_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Container_descriptor_,
      Container::default_instance_,
      Container_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Container));
  Any_Type_descriptor_ = file->message_type(6);
  static const int Any_Type_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any_Type, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any_Type, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any_Type, param_),
  };
  Any_Type_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Any_Type_descriptor_,
      Any_Type::default_instance_,
      Any_Type_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any_Type, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any_Type, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Any_Type));
  Complex_Type_descriptor_ = file->message_type(7);
  static const int Complex_Type_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Complex_Type, field_),
  };
  Complex_Type_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Complex_Type_descriptor_,
      Complex_Type::default_instance_,
      Complex_Type_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Complex_Type, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Complex_Type, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Complex_Type));
  Ref_Type_descriptor_ = file->message_type(8);
  static const int Ref_Type_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ref_Type, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ref_Type, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ref_Type, facet_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ref_Type, instance_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ref_Type, owner_endpoint_),
  };
  Ref_Type_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ref_Type_descriptor_,
      Ref_Type::default_instance_,
      Ref_Type_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ref_Type, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ref_Type, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ref_Type));
  Ref_Type_Owner_descriptor_ = Ref_Type_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Exception_descriptor_, &Exception::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Invocation_descriptor_, &Invocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parameter_descriptor_, &Parameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Container_descriptor_, &Container::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Any_Type_descriptor_, &Any_Type::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Complex_Type_descriptor_, &Complex_Type::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ref_Type_descriptor_, &Ref_Type::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Message_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Exception::default_instance_;
  delete Exception_reflection_;
  delete Invocation::default_instance_;
  delete Invocation_reflection_;
  delete Parameter::default_instance_;
  delete Parameter_reflection_;
  delete Container::default_instance_;
  delete Container_reflection_;
  delete Any_Type::default_instance_;
  delete Any_Type_reflection_;
  delete Complex_Type::default_instance_;
  delete Complex_Type_reflection_;
  delete Ref_Type::default_instance_;
  delete Ref_Type_reflection_;
}

void protobuf_AddDesc_Message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMessage.proto\022\003rpc\"\232\003\n\007Message\022\032\n\022requ"
    "ester_endpoint\030\001 \001(\t\022\037\n\004type\030\002 \002(\0162\021.rpc"
    ".Message.Type\022#\n\ninvocation\030\003 \001(\0132\017.rpc."
    "Invocation\022\035\n\007request\030\004 \001(\0132\014.rpc.Reques"
    "t\022!\n\tret_value\030\005 \001(\0132\016.rpc.Parameter\022\017\n\007"
    "ret_int\030\006 \001(\005\022!\n\texception\030\007 \001(\0132\016.rpc.E"
    "xception\"\266\001\n\004Type\022\016\n\nINVOCATION\020\000\022\017\n\013REQ"
    "UEST_NEW\020\001\022\022\n\016REQUEST_LOOKUP\020\002\022\021\n\rREQUES"
    "T_LEASE\020\003\022\030\n\024REQUEST_CANCEL_LEASE\020\004\022\n\n\006R"
    "ETURN\020\005\022\r\n\tEXCEPTION\020\006\022\016\n\nBARRIER_UP\020\007\022\017"
    "\n\013BARRIER_HIT\020\010\022\020\n\014BARRIER_DOWN\020\t\"O\n\007Req"
    "uest\022\025\n\rinstance_type\030\002 \001(\t\022\022\n\nlookup_ke"
    "y\030\003 \001(\t\022\031\n\021lease_instance_id\030\004 \001(\r\"\206\001\n\tE"
    "xception\022!\n\004type\030\001 \002(\0162\023.rpc.Exception.T"
    "ype\022\021\n\ttype_name\030\002 \002(\t\022\014\n\004what\030\003 \002(\t\"5\n\004"
    "Type\022\t\n\005CORAL\020\000\022\014\n\010REMOTING\020\001\022\007\n\003STD\020\002\022\013"
    "\n\007UNKNOWN\020\003\"\213\001\n\nInvocation\022\023\n\013instance_i"
    "d\030\001 \002(\r\022\021\n\tfacet_idx\030\002 \002(\r\022\022\n\nmember_idx"
    "\030\003 \002(\r\022\022\n\ntype_depth\030\004 \002(\005\022\r\n\005synch\030\005 \002("
    "\010\022\036\n\006params\030\006 \003(\0132\016.rpc.Parameter\".\n\tPar"
    "ameter\022!\n\tcontainer\030\001 \003(\0132\016.rpc.Containe"
    "r\"\245\001\n\tContainer\022\017\n\007boolean\030\001 \001(\010\022\013\n\003str\030"
    "\002 \001(\t\022\017\n\007numeric\030\003 \001(\001\022\'\n\014complex_type\030\004"
    " \001(\0132\021.rpc.Complex_Type\022\037\n\010any_type\030\005 \001("
    "\0132\r.rpc.Any_Type\022\037\n\010ref_type\030\006 \001(\0132\r.rpc"
    ".Ref_Type\"E\n\010Any_Type\022\014\n\004kind\030\001 \002(\005\022\014\n\004t"
    "ype\030\002 \001(\t\022\035\n\005param\030\003 \001(\0132\016.rpc.Parameter"
    "\"-\n\014Complex_Type\022\035\n\005field\030\001 \003(\0132\016.rpc.Pa"
    "rameter\"\307\001\n\010Ref_Type\022\"\n\005owner\030\001 \002(\0162\023.rp"
    "c.Ref_Type.Owner\022\023\n\013instance_id\030\002 \002(\r\022\021\n"
    "\tfacet_idx\030\003 \002(\r\022\025\n\rinstance_type\030\004 \001(\t\022"
    "\026\n\016owner_endpoint\030\005 \001(\t\"@\n\005Owner\022\020\n\014OWNE"
    "R_SENDER\020\000\022\022\n\016OWNER_RECEIVER\020\001\022\021\n\rOWNER_"
    "ANOTHER\020\002", 1329);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Message.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  Request::default_instance_ = new Request();
  Exception::default_instance_ = new Exception();
  Invocation::default_instance_ = new Invocation();
  Parameter::default_instance_ = new Parameter();
  Container::default_instance_ = new Container();
  Any_Type::default_instance_ = new Any_Type();
  Complex_Type::default_instance_ = new Complex_Type();
  Ref_Type::default_instance_ = new Ref_Type();
  Message::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Exception::default_instance_->InitAsDefaultInstance();
  Invocation::default_instance_->InitAsDefaultInstance();
  Parameter::default_instance_->InitAsDefaultInstance();
  Container::default_instance_->InitAsDefaultInstance();
  Any_Type::default_instance_->InitAsDefaultInstance();
  Complex_Type::default_instance_->InitAsDefaultInstance();
  Ref_Type::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Message_2eproto {
  StaticDescriptorInitializer_Message_2eproto() {
    protobuf_AddDesc_Message_2eproto();
  }
} static_descriptor_initializer_Message_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Type_descriptor_;
}
bool Message_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_Type Message::INVOCATION;
const Message_Type Message::REQUEST_NEW;
const Message_Type Message::REQUEST_LOOKUP;
const Message_Type Message::REQUEST_LEASE;
const Message_Type Message::REQUEST_CANCEL_LEASE;
const Message_Type Message::RETURN;
const Message_Type Message::EXCEPTION;
const Message_Type Message::BARRIER_UP;
const Message_Type Message::BARRIER_HIT;
const Message_Type Message::BARRIER_DOWN;
const Message_Type Message::Type_MIN;
const Message_Type Message::Type_MAX;
const int Message::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Message::kRequesterEndpointFieldNumber;
const int Message::kTypeFieldNumber;
const int Message::kInvocationFieldNumber;
const int Message::kRequestFieldNumber;
const int Message::kRetValueFieldNumber;
const int Message::kRetIntFieldNumber;
const int Message::kExceptionFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
  invocation_ = const_cast< ::rpc::Invocation*>(&::rpc::Invocation::default_instance());
  request_ = const_cast< ::rpc::Request*>(&::rpc::Request::default_instance());
  ret_value_ = const_cast< ::rpc::Parameter*>(&::rpc::Parameter::default_instance());
  exception_ = const_cast< ::rpc::Exception*>(&::rpc::Exception::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  requester_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  invocation_ = NULL;
  request_ = NULL;
  ret_value_ = NULL;
  ret_int_ = 0;
  exception_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (requester_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete requester_endpoint_;
  }
  if (this != default_instance_) {
    delete invocation_;
    delete request_;
    delete ret_value_;
    delete exception_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_requester_endpoint()) {
      if (requester_endpoint_ != &::google::protobuf::internal::kEmptyString) {
        requester_endpoint_->clear();
      }
    }
    type_ = 0;
    if (has_invocation()) {
      if (invocation_ != NULL) invocation_->::rpc::Invocation::Clear();
    }
    if (has_request()) {
      if (request_ != NULL) request_->::rpc::Request::Clear();
    }
    if (has_ret_value()) {
      if (ret_value_ != NULL) ret_value_->::rpc::Parameter::Clear();
    }
    ret_int_ = 0;
    if (has_exception()) {
      if (exception_ != NULL) exception_->::rpc::Exception::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string requester_endpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requester_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requester_endpoint().data(), this->requester_endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .rpc.Message.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rpc::Message_Type_IsValid(value)) {
            set_type(static_cast< ::rpc::Message_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_invocation;
        break;
      }
      
      // optional .rpc.Invocation invocation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invocation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invocation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_request;
        break;
      }
      
      // optional .rpc.Request request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ret_value;
        break;
      }
      
      // optional .rpc.Parameter ret_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ret_int;
        break;
      }
      
      // optional int32 ret_int = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_int_)));
          set_has_ret_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_exception;
        break;
      }
      
      // optional .rpc.Exception exception = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string requester_endpoint = 1;
  if (has_requester_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requester_endpoint().data(), this->requester_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->requester_endpoint(), output);
  }
  
  // required .rpc.Message.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional .rpc.Invocation invocation = 3;
  if (has_invocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->invocation(), output);
  }
  
  // optional .rpc.Request request = 4;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->request(), output);
  }
  
  // optional .rpc.Parameter ret_value = 5;
  if (has_ret_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ret_value(), output);
  }
  
  // optional int32 ret_int = 6;
  if (has_ret_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ret_int(), output);
  }
  
  // optional .rpc.Exception exception = 7;
  if (has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->exception(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string requester_endpoint = 1;
  if (has_requester_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requester_endpoint().data(), this->requester_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->requester_endpoint(), target);
  }
  
  // required .rpc.Message.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional .rpc.Invocation invocation = 3;
  if (has_invocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->invocation(), target);
  }
  
  // optional .rpc.Request request = 4;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->request(), target);
  }
  
  // optional .rpc.Parameter ret_value = 5;
  if (has_ret_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ret_value(), target);
  }
  
  // optional int32 ret_int = 6;
  if (has_ret_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ret_int(), target);
  }
  
  // optional .rpc.Exception exception = 7;
  if (has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->exception(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string requester_endpoint = 1;
    if (has_requester_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requester_endpoint());
    }
    
    // required .rpc.Message.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .rpc.Invocation invocation = 3;
    if (has_invocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invocation());
    }
    
    // optional .rpc.Request request = 4;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request());
    }
    
    // optional .rpc.Parameter ret_value = 5;
    if (has_ret_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret_value());
    }
    
    // optional int32 ret_int = 6;
    if (has_ret_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_int());
    }
    
    // optional .rpc.Exception exception = 7;
    if (has_exception()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exception());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requester_endpoint()) {
      set_requester_endpoint(from.requester_endpoint());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_invocation()) {
      mutable_invocation()->::rpc::Invocation::MergeFrom(from.invocation());
    }
    if (from.has_request()) {
      mutable_request()->::rpc::Request::MergeFrom(from.request());
    }
    if (from.has_ret_value()) {
      mutable_ret_value()->::rpc::Parameter::MergeFrom(from.ret_value());
    }
    if (from.has_ret_int()) {
      set_ret_int(from.ret_int());
    }
    if (from.has_exception()) {
      mutable_exception()->::rpc::Exception::MergeFrom(from.exception());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_invocation()) {
    if (!this->invocation().IsInitialized()) return false;
  }
  if (has_ret_value()) {
    if (!this->ret_value().IsInitialized()) return false;
  }
  if (has_exception()) {
    if (!this->exception().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(requester_endpoint_, other->requester_endpoint_);
    std::swap(type_, other->type_);
    std::swap(invocation_, other->invocation_);
    std::swap(request_, other->request_);
    std::swap(ret_value_, other->ret_value_);
    std::swap(ret_int_, other->ret_int_);
    std::swap(exception_, other->exception_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kInstanceTypeFieldNumber;
const int Request::kLookupKeyFieldNumber;
const int Request::kLeaseInstanceIdFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  instance_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lookup_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lease_instance_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (instance_type_ != &::google::protobuf::internal::kEmptyString) {
    delete instance_type_;
  }
  if (lookup_key_ != &::google::protobuf::internal::kEmptyString) {
    delete lookup_key_;
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instance_type()) {
      if (instance_type_ != &::google::protobuf::internal::kEmptyString) {
        instance_type_->clear();
      }
    }
    if (has_lookup_key()) {
      if (lookup_key_ != &::google::protobuf::internal::kEmptyString) {
        lookup_key_->clear();
      }
    }
    lease_instance_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instance_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instance_type().data(), this->instance_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lookup_key;
        break;
      }
      
      // optional string lookup_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lookup_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lookup_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lookup_key().data(), this->lookup_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lease_instance_id;
        break;
      }
      
      // optional uint32 lease_instance_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lease_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lease_instance_id_)));
          set_has_lease_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string instance_type = 2;
  if (has_instance_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instance_type().data(), this->instance_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->instance_type(), output);
  }
  
  // optional string lookup_key = 3;
  if (has_lookup_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lookup_key().data(), this->lookup_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lookup_key(), output);
  }
  
  // optional uint32 lease_instance_id = 4;
  if (has_lease_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lease_instance_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string instance_type = 2;
  if (has_instance_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instance_type().data(), this->instance_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instance_type(), target);
  }
  
  // optional string lookup_key = 3;
  if (has_lookup_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lookup_key().data(), this->lookup_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lookup_key(), target);
  }
  
  // optional uint32 lease_instance_id = 4;
  if (has_lease_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lease_instance_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string instance_type = 2;
    if (has_instance_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instance_type());
    }
    
    // optional string lookup_key = 3;
    if (has_lookup_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lookup_key());
    }
    
    // optional uint32 lease_instance_id = 4;
    if (has_lease_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lease_instance_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_type()) {
      set_instance_type(from.instance_type());
    }
    if (from.has_lookup_key()) {
      set_lookup_key(from.lookup_key());
    }
    if (from.has_lease_instance_id()) {
      set_lease_instance_id(from.lease_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(instance_type_, other->instance_type_);
    std::swap(lookup_key_, other->lookup_key_);
    std::swap(lease_instance_id_, other->lease_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Exception_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Exception_Type_descriptor_;
}
bool Exception_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Exception_Type Exception::CORAL;
const Exception_Type Exception::REMOTING;
const Exception_Type Exception::STD;
const Exception_Type Exception::UNKNOWN;
const Exception_Type Exception::Type_MIN;
const Exception_Type Exception::Type_MAX;
const int Exception::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Exception::kTypeFieldNumber;
const int Exception::kTypeNameFieldNumber;
const int Exception::kWhatFieldNumber;
#endif  // !_MSC_VER

Exception::Exception()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Exception::InitAsDefaultInstance() {
}

Exception::Exception(const Exception& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Exception::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Exception::~Exception() {
  SharedDtor();
}

void Exception::SharedDtor() {
  if (type_name_ != &::google::protobuf::internal::kEmptyString) {
    delete type_name_;
  }
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    delete what_;
  }
  if (this != default_instance_) {
  }
}

void Exception::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Exception::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Exception_descriptor_;
}

const Exception& Exception::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Exception* Exception::default_instance_ = NULL;

Exception* Exception::New() const {
  return new Exception;
}

void Exception::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_type_name()) {
      if (type_name_ != &::google::protobuf::internal::kEmptyString) {
        type_name_->clear();
      }
    }
    if (has_what()) {
      if (what_ != &::google::protobuf::internal::kEmptyString) {
        what_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Exception::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rpc.Exception.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rpc::Exception_Type_IsValid(value)) {
            set_type(static_cast< ::rpc::Exception_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type_name;
        break;
      }
      
      // required string type_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type_name().data(), this->type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_what;
        break;
      }
      
      // required string what = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_what:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_what()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->what().data(), this->what().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Exception::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rpc.Exception.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required string type_name = 2;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type_name(), output);
  }
  
  // required string what = 3;
  if (has_what()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->what().data(), this->what().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->what(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Exception::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rpc.Exception.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required string type_name = 2;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type_name(), target);
  }
  
  // required string what = 3;
  if (has_what()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->what().data(), this->what().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->what(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Exception::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rpc.Exception.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required string type_name = 2;
    if (has_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type_name());
    }
    
    // required string what = 3;
    if (has_what()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->what());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Exception::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Exception* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Exception*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Exception::MergeFrom(const Exception& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_type_name()) {
      set_type_name(from.type_name());
    }
    if (from.has_what()) {
      set_what(from.what());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Exception::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Exception::CopyFrom(const Exception& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Exception::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Exception::Swap(Exception* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(type_name_, other->type_name_);
    std::swap(what_, other->what_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Exception::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Exception_descriptor_;
  metadata.reflection = Exception_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Invocation::kInstanceIdFieldNumber;
const int Invocation::kFacetIdxFieldNumber;
const int Invocation::kMemberIdxFieldNumber;
const int Invocation::kTypeDepthFieldNumber;
const int Invocation::kSynchFieldNumber;
const int Invocation::kParamsFieldNumber;
#endif  // !_MSC_VER

Invocation::Invocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Invocation::InitAsDefaultInstance() {
}

Invocation::Invocation(const Invocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Invocation::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0u;
  facet_idx_ = 0u;
  member_idx_ = 0u;
  type_depth_ = 0;
  synch_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Invocation::~Invocation() {
  SharedDtor();
}

void Invocation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Invocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Invocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Invocation_descriptor_;
}

const Invocation& Invocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Invocation* Invocation::default_instance_ = NULL;

Invocation* Invocation::New() const {
  return new Invocation;
}

void Invocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0u;
    facet_idx_ = 0u;
    member_idx_ = 0u;
    type_depth_ = 0;
    synch_ = false;
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Invocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_facet_idx;
        break;
      }
      
      // required uint32 facet_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facet_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facet_idx_)));
          set_has_facet_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_member_idx;
        break;
      }
      
      // required uint32 member_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_idx_)));
          set_has_member_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type_depth;
        break;
      }
      
      // required int32 type_depth = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_depth_)));
          set_has_type_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_synch;
        break;
      }
      
      // required bool synch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_synch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &synch_)));
          set_has_synch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_params;
        break;
      }
      
      // repeated .rpc.Parameter params = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Invocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instance_id(), output);
  }
  
  // required uint32 facet_idx = 2;
  if (has_facet_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->facet_idx(), output);
  }
  
  // required uint32 member_idx = 3;
  if (has_member_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->member_idx(), output);
  }
  
  // required int32 type_depth = 4;
  if (has_type_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type_depth(), output);
  }
  
  // required bool synch = 5;
  if (has_synch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->synch(), output);
  }
  
  // repeated .rpc.Parameter params = 6;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->params(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Invocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instance_id(), target);
  }
  
  // required uint32 facet_idx = 2;
  if (has_facet_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->facet_idx(), target);
  }
  
  // required uint32 member_idx = 3;
  if (has_member_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->member_idx(), target);
  }
  
  // required int32 type_depth = 4;
  if (has_type_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type_depth(), target);
  }
  
  // required bool synch = 5;
  if (has_synch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->synch(), target);
  }
  
  // repeated .rpc.Parameter params = 6;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->params(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Invocation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }
    
    // required uint32 facet_idx = 2;
    if (has_facet_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facet_idx());
    }
    
    // required uint32 member_idx = 3;
    if (has_member_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_idx());
    }
    
    // required int32 type_depth = 4;
    if (has_type_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_depth());
    }
    
    // required bool synch = 5;
    if (has_synch()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .rpc.Parameter params = 6;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Invocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Invocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Invocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Invocation::MergeFrom(const Invocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_facet_idx()) {
      set_facet_idx(from.facet_idx());
    }
    if (from.has_member_idx()) {
      set_member_idx(from.member_idx());
    }
    if (from.has_type_depth()) {
      set_type_depth(from.type_depth());
    }
    if (from.has_synch()) {
      set_synch(from.synch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Invocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Invocation::CopyFrom(const Invocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  for (int i = 0; i < params_size(); i++) {
    if (!this->params(i).IsInitialized()) return false;
  }
  return true;
}

void Invocation::Swap(Invocation* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(facet_idx_, other->facet_idx_);
    std::swap(member_idx_, other->member_idx_);
    std::swap(type_depth_, other->type_depth_);
    std::swap(synch_, other->synch_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Invocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Invocation_descriptor_;
  metadata.reflection = Invocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Parameter::kContainerFieldNumber;
#endif  // !_MSC_VER

Parameter::Parameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parameter::InitAsDefaultInstance() {
}

Parameter::Parameter(const Parameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parameter::~Parameter() {
  SharedDtor();
}

void Parameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parameter_descriptor_;
}

const Parameter& Parameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Parameter* Parameter::default_instance_ = NULL;

Parameter* Parameter::New() const {
  return new Parameter;
}

void Parameter::Clear() {
  container_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.Container container = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_container()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_container;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.Container container = 1;
  for (int i = 0; i < this->container_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->container(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.Container container = 1;
  for (int i = 0; i < this->container_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->container(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parameter::ByteSize() const {
  int total_size = 0;
  
  // repeated .rpc.Container container = 1;
  total_size += 1 * this->container_size();
  for (int i = 0; i < this->container_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->container(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parameter::MergeFrom(const Parameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  container_.MergeFrom(from.container_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter::CopyFrom(const Parameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {
  
  for (int i = 0; i < container_size(); i++) {
    if (!this->container(i).IsInitialized()) return false;
  }
  return true;
}

void Parameter::Swap(Parameter* other) {
  if (other != this) {
    container_.Swap(&other->container_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parameter_descriptor_;
  metadata.reflection = Parameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Container::kBooleanFieldNumber;
const int Container::kStrFieldNumber;
const int Container::kNumericFieldNumber;
const int Container::kComplexTypeFieldNumber;
const int Container::kAnyTypeFieldNumber;
const int Container::kRefTypeFieldNumber;
#endif  // !_MSC_VER

Container::Container()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Container::InitAsDefaultInstance() {
  complex_type_ = const_cast< ::rpc::Complex_Type*>(&::rpc::Complex_Type::default_instance());
  any_type_ = const_cast< ::rpc::Any_Type*>(&::rpc::Any_Type::default_instance());
  ref_type_ = const_cast< ::rpc::Ref_Type*>(&::rpc::Ref_Type::default_instance());
}

Container::Container(const Container& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Container::SharedCtor() {
  _cached_size_ = 0;
  boolean_ = false;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  numeric_ = 0;
  complex_type_ = NULL;
  any_type_ = NULL;
  ref_type_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Container::~Container() {
  SharedDtor();
}

void Container::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
    delete complex_type_;
    delete any_type_;
    delete ref_type_;
  }
}

void Container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Container::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Container_descriptor_;
}

const Container& Container::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Container* Container::default_instance_ = NULL;

Container* Container::New() const {
  return new Container;
}

void Container::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boolean_ = false;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
    numeric_ = 0;
    if (has_complex_type()) {
      if (complex_type_ != NULL) complex_type_->::rpc::Complex_Type::Clear();
    }
    if (has_any_type()) {
      if (any_type_ != NULL) any_type_->::rpc::Any_Type::Clear();
    }
    if (has_ref_type()) {
      if (ref_type_ != NULL) ref_type_->::rpc::Ref_Type::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool boolean = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolean_)));
          set_has_boolean();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }
      
      // optional string str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_numeric;
        break;
      }
      
      // optional double numeric = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_numeric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &numeric_)));
          set_has_numeric();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_complex_type;
        break;
      }
      
      // optional .rpc.Complex_Type complex_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_complex_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_complex_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_any_type;
        break;
      }
      
      // optional .rpc.Any_Type any_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_any_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_any_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ref_type;
        break;
      }
      
      // optional .rpc.Ref_Type ref_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ref_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ref_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool boolean = 1;
  if (has_boolean()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->boolean(), output);
  }
  
  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str(), output);
  }
  
  // optional double numeric = 3;
  if (has_numeric()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->numeric(), output);
  }
  
  // optional .rpc.Complex_Type complex_type = 4;
  if (has_complex_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->complex_type(), output);
  }
  
  // optional .rpc.Any_Type any_type = 5;
  if (has_any_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->any_type(), output);
  }
  
  // optional .rpc.Ref_Type ref_type = 6;
  if (has_ref_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ref_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Container::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool boolean = 1;
  if (has_boolean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->boolean(), target);
  }
  
  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }
  
  // optional double numeric = 3;
  if (has_numeric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->numeric(), target);
  }
  
  // optional .rpc.Complex_Type complex_type = 4;
  if (has_complex_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->complex_type(), target);
  }
  
  // optional .rpc.Any_Type any_type = 5;
  if (has_any_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->any_type(), target);
  }
  
  // optional .rpc.Ref_Type ref_type = 6;
  if (has_ref_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ref_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Container::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool boolean = 1;
    if (has_boolean()) {
      total_size += 1 + 1;
    }
    
    // optional string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
    // optional double numeric = 3;
    if (has_numeric()) {
      total_size += 1 + 8;
    }
    
    // optional .rpc.Complex_Type complex_type = 4;
    if (has_complex_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->complex_type());
    }
    
    // optional .rpc.Any_Type any_type = 5;
    if (has_any_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->any_type());
    }
    
    // optional .rpc.Ref_Type ref_type = 6;
    if (has_ref_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ref_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Container::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Container* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Container*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Container::MergeFrom(const Container& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boolean()) {
      set_boolean(from.boolean());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_numeric()) {
      set_numeric(from.numeric());
    }
    if (from.has_complex_type()) {
      mutable_complex_type()->::rpc::Complex_Type::MergeFrom(from.complex_type());
    }
    if (from.has_any_type()) {
      mutable_any_type()->::rpc::Any_Type::MergeFrom(from.any_type());
    }
    if (from.has_ref_type()) {
      mutable_ref_type()->::rpc::Ref_Type::MergeFrom(from.ref_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Container::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Container::CopyFrom(const Container& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Container::IsInitialized() const {
  
  if (has_complex_type()) {
    if (!this->complex_type().IsInitialized()) return false;
  }
  if (has_any_type()) {
    if (!this->any_type().IsInitialized()) return false;
  }
  if (has_ref_type()) {
    if (!this->ref_type().IsInitialized()) return false;
  }
  return true;
}

void Container::Swap(Container* other) {
  if (other != this) {
    std::swap(boolean_, other->boolean_);
    std::swap(str_, other->str_);
    std::swap(numeric_, other->numeric_);
    std::swap(complex_type_, other->complex_type_);
    std::swap(any_type_, other->any_type_);
    std::swap(ref_type_, other->ref_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Container::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Container_descriptor_;
  metadata.reflection = Container_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Any_Type::kKindFieldNumber;
const int Any_Type::kTypeFieldNumber;
const int Any_Type::kParamFieldNumber;
#endif  // !_MSC_VER

Any_Type::Any_Type()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Any_Type::InitAsDefaultInstance() {
  param_ = const_cast< ::rpc::Parameter*>(&::rpc::Parameter::default_instance());
}

Any_Type::Any_Type(const Any_Type& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Any_Type::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Any_Type::~Any_Type() {
  SharedDtor();
}

void Any_Type::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
    delete param_;
  }
}

void Any_Type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Any_Type::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Any_Type_descriptor_;
}

const Any_Type& Any_Type::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Any_Type* Any_Type::default_instance_ = NULL;

Any_Type* Any_Type::New() const {
  return new Any_Type;
}

void Any_Type::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_param()) {
      if (param_ != NULL) param_->::rpc::Parameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Any_Type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }
      
      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_param;
        break;
      }
      
      // optional .rpc.Parameter param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Any_Type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind(), output);
  }
  
  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }
  
  // optional .rpc.Parameter param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Any_Type::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind(), target);
  }
  
  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }
  
  // optional .rpc.Parameter param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Any_Type::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }
    
    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // optional .rpc.Parameter param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Any_Type::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Any_Type* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Any_Type*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Any_Type::MergeFrom(const Any_Type& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_param()) {
      mutable_param()->::rpc::Parameter::MergeFrom(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Any_Type::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Any_Type::CopyFrom(const Any_Type& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Any_Type::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_param()) {
    if (!this->param().IsInitialized()) return false;
  }
  return true;
}

void Any_Type::Swap(Any_Type* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(type_, other->type_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Any_Type::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Any_Type_descriptor_;
  metadata.reflection = Any_Type_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Complex_Type::kFieldFieldNumber;
#endif  // !_MSC_VER

Complex_Type::Complex_Type()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Complex_Type::InitAsDefaultInstance() {
}

Complex_Type::Complex_Type(const Complex_Type& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Complex_Type::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Complex_Type::~Complex_Type() {
  SharedDtor();
}

void Complex_Type::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Complex_Type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Complex_Type::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Complex_Type_descriptor_;
}

const Complex_Type& Complex_Type::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Complex_Type* Complex_Type::default_instance_ = NULL;

Complex_Type* Complex_Type::New() const {
  return new Complex_Type;
}

void Complex_Type::Clear() {
  field_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Complex_Type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.Parameter field = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_field;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Complex_Type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.Parameter field = 1;
  for (int i = 0; i < this->field_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Complex_Type::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.Parameter field = 1;
  for (int i = 0; i < this->field_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->field(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Complex_Type::ByteSize() const {
  int total_size = 0;
  
  // repeated .rpc.Parameter field = 1;
  total_size += 1 * this->field_size();
  for (int i = 0; i < this->field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Complex_Type::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Complex_Type* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Complex_Type*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Complex_Type::MergeFrom(const Complex_Type& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_.MergeFrom(from.field_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Complex_Type::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Complex_Type::CopyFrom(const Complex_Type& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Complex_Type::IsInitialized() const {
  
  for (int i = 0; i < field_size(); i++) {
    if (!this->field(i).IsInitialized()) return false;
  }
  return true;
}

void Complex_Type::Swap(Complex_Type* other) {
  if (other != this) {
    field_.Swap(&other->field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Complex_Type::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Complex_Type_descriptor_;
  metadata.reflection = Complex_Type_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Ref_Type_Owner_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ref_Type_Owner_descriptor_;
}
bool Ref_Type_Owner_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Ref_Type_Owner Ref_Type::OWNER_SENDER;
const Ref_Type_Owner Ref_Type::OWNER_RECEIVER;
const Ref_Type_Owner Ref_Type::OWNER_ANOTHER;
const Ref_Type_Owner Ref_Type::Owner_MIN;
const Ref_Type_Owner Ref_Type::Owner_MAX;
const int Ref_Type::Owner_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Ref_Type::kOwnerFieldNumber;
const int Ref_Type::kInstanceIdFieldNumber;
const int Ref_Type::kFacetIdxFieldNumber;
const int Ref_Type::kInstanceTypeFieldNumber;
const int Ref_Type::kOwnerEndpointFieldNumber;
#endif  // !_MSC_VER

Ref_Type::Ref_Type()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ref_Type::InitAsDefaultInstance() {
}

Ref_Type::Ref_Type(const Ref_Type& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ref_Type::SharedCtor() {
  _cached_size_ = 0;
  owner_ = 0;
  instance_id_ = 0u;
  facet_idx_ = 0u;
  instance_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  owner_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ref_Type::~Ref_Type() {
  SharedDtor();
}

void Ref_Type::SharedDtor() {
  if (instance_type_ != &::google::protobuf::internal::kEmptyString) {
    delete instance_type_;
  }
  if (owner_endpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_endpoint_;
  }
  if (this != default_instance_) {
  }
}

void Ref_Type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ref_Type::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ref_Type_descriptor_;
}

const Ref_Type& Ref_Type::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Ref_Type* Ref_Type::default_instance_ = NULL;

Ref_Type* Ref_Type::New() const {
  return new Ref_Type;
}

void Ref_Type::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owner_ = 0;
    instance_id_ = 0u;
    facet_idx_ = 0u;
    if (has_instance_type()) {
      if (instance_type_ != &::google::protobuf::internal::kEmptyString) {
        instance_type_->clear();
      }
    }
    if (has_owner_endpoint()) {
      if (owner_endpoint_ != &::google::protobuf::internal::kEmptyString) {
        owner_endpoint_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ref_Type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rpc.Ref_Type.Owner owner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rpc::Ref_Type_Owner_IsValid(value)) {
            set_owner(static_cast< ::rpc::Ref_Type_Owner >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instance_id;
        break;
      }
      
      // required uint32 instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_facet_idx;
        break;
      }
      
      // required uint32 facet_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facet_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facet_idx_)));
          set_has_facet_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_instance_type;
        break;
      }
      
      // optional string instance_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instance_type().data(), this->instance_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_owner_endpoint;
        break;
      }
      
      // optional string owner_endpoint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->owner_endpoint().data(), this->owner_endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ref_Type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rpc.Ref_Type.Owner owner = 1;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->owner(), output);
  }
  
  // required uint32 instance_id = 2;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->instance_id(), output);
  }
  
  // required uint32 facet_idx = 3;
  if (has_facet_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->facet_idx(), output);
  }
  
  // optional string instance_type = 4;
  if (has_instance_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instance_type().data(), this->instance_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->instance_type(), output);
  }
  
  // optional string owner_endpoint = 5;
  if (has_owner_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_endpoint().data(), this->owner_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->owner_endpoint(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ref_Type::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rpc.Ref_Type.Owner owner = 1;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->owner(), target);
  }
  
  // required uint32 instance_id = 2;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->instance_id(), target);
  }
  
  // required uint32 facet_idx = 3;
  if (has_facet_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->facet_idx(), target);
  }
  
  // optional string instance_type = 4;
  if (has_instance_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instance_type().data(), this->instance_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instance_type(), target);
  }
  
  // optional string owner_endpoint = 5;
  if (has_owner_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_endpoint().data(), this->owner_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->owner_endpoint(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ref_Type::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rpc.Ref_Type.Owner owner = 1;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->owner());
    }
    
    // required uint32 instance_id = 2;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }
    
    // required uint32 facet_idx = 3;
    if (has_facet_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facet_idx());
    }
    
    // optional string instance_type = 4;
    if (has_instance_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instance_type());
    }
    
    // optional string owner_endpoint = 5;
    if (has_owner_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_endpoint());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ref_Type::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ref_Type* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ref_Type*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ref_Type::MergeFrom(const Ref_Type& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_facet_idx()) {
      set_facet_idx(from.facet_idx());
    }
    if (from.has_instance_type()) {
      set_instance_type(from.instance_type());
    }
    if (from.has_owner_endpoint()) {
      set_owner_endpoint(from.owner_endpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ref_Type::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ref_Type::CopyFrom(const Ref_Type& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ref_Type::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Ref_Type::Swap(Ref_Type* other) {
  if (other != this) {
    std::swap(owner_, other->owner_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(facet_idx_, other->facet_idx_);
    std::swap(instance_type_, other->instance_type_);
    std::swap(owner_endpoint_, other->owner_endpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ref_Type::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ref_Type_descriptor_;
  metadata.reflection = Ref_Type_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)
