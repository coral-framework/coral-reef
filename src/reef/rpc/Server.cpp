/*
 * Component implementation template for 'reef.rpc.Server'.
 * WARNING: remember to copy this file to your project dir before you begin to change it.
 * Generated by the Coral Compiler v0.8.0 on Tue May 29 01:54:16 2012.p
 */

#include "Server_Base.h"
#include <co/IObject.h>

namespace reef {
namespace rpc {

class Server : public Server_Base
{
public:
	Server()
	{
		// empty constructor
	}

	virtual ~Server()
	{
		// empty destructor
	}

	// ------ reef.rpc.IServer Methods ------ //

	void breakLease( co::IObject* instance, const std::string& refererEndpoint )
	{
		// TODO: implement this method.
	}

	co::IObject* getInstance( const std::string& key, const std::string& refererEndpoint )
	{
		static co::RefPtr<co::IObject> dummy;
		return dummy;
	}

	void lease( co::IObject* instance, const std::string& refererEndpoint )
	{
		// TODO: implement this method.
	}

	co::IObject* newInstance( const std::string& componentName, const std::string& refererEndpoint )
	{
		static co::RefPtr<co::IObject> dummy;
		return dummy;
	}

private:
	// member variables
};

CORAL_EXPORT_COMPONENT( Server, Server );

} // namespace rpc
} // namespace reef
