/*
 * Component implementation template for 'reef.rpc.LifecycleManager'.
 * WARNING: remember to copy this file to your project dir before you begin to change it.
 * Generated by the Coral Compiler v0.8.0 on Tue May 29 01:26:49 2012.p
 */

#include "LifecycleManager_Base.h"

#include <co/IObject.h>

namespace reef {
namespace rpc {

class LifecycleManager : public LifecycleManager_Base
{
public:
	LifecycleManager();

	virtual ~LifecycleManager();

	// ------ reef.rpc.IServer Methods ------ //

	void breakLease( co::IObject* instance, const std::string& refererEndpoint );

	co::IObject* getInstance( const std::string& key, const std::string& refererEndpoint );

	void lease( co::IObject* instance, const std::string& refererEndpoint );

	co::IObject* newInstance( const std::string& componentName, const std::string& refererEndpoint );
    
    // ------ C++ only methods used internally by the RPC module ------ //
    
    /*!
        Publishes \param instance under \param key. Sets a local reference to it
     */
    void publish( co::IObject* instance, const std::string key );

private:
	// member variables
};


} // namespace rpc
} // namespace reef
