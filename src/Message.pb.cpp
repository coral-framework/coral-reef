// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace reef {

namespace {

const ::google::protobuf::Descriptor* Data_Container_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_Container_reflection_ = NULL;
const ::google::protobuf::Descriptor* Argument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Argument_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ref_Type_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ref_Type_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Ref_Type_Owner_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Message_Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Member_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_New_Inst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_New_Inst_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Acc_Inst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Acc_Inst_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Message_2eproto() {
  protobuf_AddDesc_Message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Message.proto");
  GOOGLE_CHECK(file != NULL);
  Data_Container_descriptor_ = file->message_type(0);
  static const int Data_Container_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Container, boolean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Container, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Container, numeric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Container, ref_type_),
  };
  Data_Container_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Data_Container_descriptor_,
      Data_Container::default_instance_,
      Data_Container_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Container, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_Container, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Data_Container));
  Argument_descriptor_ = file->message_type(1);
  static const int Argument_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, data_),
  };
  Argument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Argument_descriptor_,
      Argument::default_instance_,
      Argument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Argument));
  Ref_Type_descriptor_ = file->message_type(2);
  static const int Ref_Type_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ref_Type, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ref_Type, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ref_Type, facet_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ref_Type, owner_ip_),
  };
  Ref_Type_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ref_Type_descriptor_,
      Ref_Type::default_instance_,
      Ref_Type_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ref_Type, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ref_Type, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ref_Type));
  Ref_Type_Owner_descriptor_ = Ref_Type_descriptor_->enum_type(0);
  Message_Member_descriptor_ = file->message_type(3);
  static const int Message_Member_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Member, facet_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Member, member_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Member, arguments_),
  };
  Message_Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Member_descriptor_,
      Message_Member::default_instance_,
      Message_Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_Member));
  Message_New_Inst_descriptor_ = file->message_type(4);
  static const int Message_New_Inst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_New_Inst, new_instance_type_),
  };
  Message_New_Inst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_New_Inst_descriptor_,
      Message_New_Inst::default_instance_,
      Message_New_Inst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_New_Inst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_New_Inst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_New_Inst));
  Message_Acc_Inst_descriptor_ = file->message_type(5);
  static const int Message_Acc_Inst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Acc_Inst, increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Acc_Inst, instance_id_),
  };
  Message_Acc_Inst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Acc_Inst_descriptor_,
      Message_Acc_Inst::default_instance_,
      Message_Acc_Inst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Acc_Inst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Acc_Inst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_Acc_Inst));
  Message_descriptor_ = file->message_type(6);
  static const int Message_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, has_return_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, msg_new_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, msg_acc_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, msg_member_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_Type_descriptor_ = Message_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Data_Container_descriptor_, &Data_Container::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Argument_descriptor_, &Argument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ref_Type_descriptor_, &Ref_Type::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Member_descriptor_, &Message_Member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_New_Inst_descriptor_, &Message_New_Inst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Acc_Inst_descriptor_, &Message_Acc_Inst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Message_2eproto() {
  delete Data_Container::default_instance_;
  delete Data_Container_reflection_;
  delete Argument::default_instance_;
  delete Argument_reflection_;
  delete Ref_Type::default_instance_;
  delete Ref_Type_reflection_;
  delete Message_Member::default_instance_;
  delete Message_Member_reflection_;
  delete Message_New_Inst::default_instance_;
  delete Message_New_Inst_reflection_;
  delete Message_Acc_Inst::default_instance_;
  delete Message_Acc_Inst_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_Message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMessage.proto\022\004reef\"a\n\016Data_Container\022"
    "\017\n\007boolean\030\001 \001(\010\022\013\n\003str\030\002 \001(\t\022\017\n\007numeric"
    "\030\003 \001(\001\022 \n\010ref_type\030\004 \001(\0132\016.reef.Ref_Type"
    "\".\n\010Argument\022\"\n\004data\030\001 \003(\0132\024.reef.Data_C"
    "ontainer\"\252\001\n\010Ref_Type\022#\n\005owner\030\001 \002(\0162\024.r"
    "eef.Ref_Type.Owner\022\023\n\013instance_id\030\002 \002(\r\022"
    "\021\n\tfacet_idx\030\003 \002(\r\022\020\n\010owner_ip\030\004 \001(\t\"\?\n\005"
    "Owner\022\017\n\013OWNER_LOCAL\020\000\022\022\n\016OWNER_RECEIVER"
    "\020\001\022\021\n\rOWNER_ANOTHER\020\002\"Z\n\016Message_Member\022"
    "\021\n\tfacet_idx\030\001 \002(\r\022\022\n\nmember_idx\030\002 \002(\r\022!"
    "\n\targuments\030\004 \003(\0132\016.reef.Argument\"-\n\020Mes"
    "sage_New_Inst\022\031\n\021new_instance_type\030\001 \001(\t"
    "\":\n\020Message_Acc_Inst\022\021\n\tincrement\030\001 \002(\010\022"
    "\023\n\013instance_id\030\002 \002(\r\"\252\002\n\007Message\022$\n\010msg_"
    "type\030\001 \002(\0162\022.reef.Message.Type\022\023\n\013instan"
    "ce_id\030\002 \002(\r\022\022\n\nhas_return\030\003 \002(\010\022,\n\014msg_n"
    "ew_inst\030\004 \001(\0132\026.reef.Message_New_Inst\022,\n"
    "\014msg_acc_inst\030\005 \001(\0132\026.reef.Message_Acc_I"
    "nst\022(\n\nmsg_member\030\006 \001(\0132\024.reef.Message_M"
    "ember\"J\n\004Type\022\020\n\014MSG_NEW_INST\020\000\022\023\n\017MSG_A"
    "CCESS_INST\020\001\022\014\n\010MSG_CALL\020\002\022\r\n\tMSG_FIELD\020"
    "\003", 841);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Message.proto", &protobuf_RegisterTypes);
  Data_Container::default_instance_ = new Data_Container();
  Argument::default_instance_ = new Argument();
  Ref_Type::default_instance_ = new Ref_Type();
  Message_Member::default_instance_ = new Message_Member();
  Message_New_Inst::default_instance_ = new Message_New_Inst();
  Message_Acc_Inst::default_instance_ = new Message_Acc_Inst();
  Message::default_instance_ = new Message();
  Data_Container::default_instance_->InitAsDefaultInstance();
  Argument::default_instance_->InitAsDefaultInstance();
  Ref_Type::default_instance_->InitAsDefaultInstance();
  Message_Member::default_instance_->InitAsDefaultInstance();
  Message_New_Inst::default_instance_->InitAsDefaultInstance();
  Message_Acc_Inst::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Message_2eproto {
  StaticDescriptorInitializer_Message_2eproto() {
    protobuf_AddDesc_Message_2eproto();
  }
} static_descriptor_initializer_Message_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Data_Container::kBooleanFieldNumber;
const int Data_Container::kStrFieldNumber;
const int Data_Container::kNumericFieldNumber;
const int Data_Container::kRefTypeFieldNumber;
#endif  // !_MSC_VER

Data_Container::Data_Container()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Data_Container::InitAsDefaultInstance() {
  ref_type_ = const_cast< ::reef::Ref_Type*>(&::reef::Ref_Type::default_instance());
}

Data_Container::Data_Container(const Data_Container& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Data_Container::SharedCtor() {
  _cached_size_ = 0;
  boolean_ = false;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  numeric_ = 0;
  ref_type_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data_Container::~Data_Container() {
  SharedDtor();
}

void Data_Container::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
    delete ref_type_;
  }
}

void Data_Container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data_Container::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_Container_descriptor_;
}

const Data_Container& Data_Container::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Data_Container* Data_Container::default_instance_ = NULL;

Data_Container* Data_Container::New() const {
  return new Data_Container;
}

void Data_Container::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boolean_ = false;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
    numeric_ = 0;
    if (has_ref_type()) {
      if (ref_type_ != NULL) ref_type_->::reef::Ref_Type::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Data_Container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool boolean = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolean_)));
          set_has_boolean();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }
      
      // optional string str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_numeric;
        break;
      }
      
      // optional double numeric = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_numeric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &numeric_)));
          set_has_numeric();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ref_type;
        break;
      }
      
      // optional .reef.Ref_Type ref_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ref_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ref_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Data_Container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool boolean = 1;
  if (has_boolean()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->boolean(), output);
  }
  
  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str(), output);
  }
  
  // optional double numeric = 3;
  if (has_numeric()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->numeric(), output);
  }
  
  // optional .reef.Ref_Type ref_type = 4;
  if (has_ref_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ref_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Data_Container::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool boolean = 1;
  if (has_boolean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->boolean(), target);
  }
  
  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }
  
  // optional double numeric = 3;
  if (has_numeric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->numeric(), target);
  }
  
  // optional .reef.Ref_Type ref_type = 4;
  if (has_ref_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ref_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Data_Container::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool boolean = 1;
    if (has_boolean()) {
      total_size += 1 + 1;
    }
    
    // optional string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
    // optional double numeric = 3;
    if (has_numeric()) {
      total_size += 1 + 8;
    }
    
    // optional .reef.Ref_Type ref_type = 4;
    if (has_ref_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ref_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data_Container::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Data_Container* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Data_Container*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data_Container::MergeFrom(const Data_Container& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boolean()) {
      set_boolean(from.boolean());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_numeric()) {
      set_numeric(from.numeric());
    }
    if (from.has_ref_type()) {
      mutable_ref_type()->::reef::Ref_Type::MergeFrom(from.ref_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Data_Container::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data_Container::CopyFrom(const Data_Container& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data_Container::IsInitialized() const {
  
  if (has_ref_type()) {
    if (!this->ref_type().IsInitialized()) return false;
  }
  return true;
}

void Data_Container::Swap(Data_Container* other) {
  if (other != this) {
    std::swap(boolean_, other->boolean_);
    std::swap(str_, other->str_);
    std::swap(numeric_, other->numeric_);
    std::swap(ref_type_, other->ref_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Data_Container::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_Container_descriptor_;
  metadata.reflection = Data_Container_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Argument::kDataFieldNumber;
#endif  // !_MSC_VER

Argument::Argument()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Argument::InitAsDefaultInstance() {
}

Argument::Argument(const Argument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Argument::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Argument::~Argument() {
  SharedDtor();
}

void Argument::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Argument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Argument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Argument_descriptor_;
}

const Argument& Argument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Argument* Argument::default_instance_ = NULL;

Argument* Argument::New() const {
  return new Argument;
}

void Argument::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Argument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .reef.Data_Container data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Argument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .reef.Data_Container data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Argument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .reef.Data_Container data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Argument::ByteSize() const {
  int total_size = 0;
  
  // repeated .reef.Data_Container data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Argument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Argument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Argument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Argument::MergeFrom(const Argument& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Argument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Argument::CopyFrom(const Argument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Argument::IsInitialized() const {
  
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void Argument::Swap(Argument* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Argument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Argument_descriptor_;
  metadata.reflection = Argument_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Ref_Type_Owner_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ref_Type_Owner_descriptor_;
}
bool Ref_Type_Owner_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Ref_Type_Owner Ref_Type::OWNER_LOCAL;
const Ref_Type_Owner Ref_Type::OWNER_RECEIVER;
const Ref_Type_Owner Ref_Type::OWNER_ANOTHER;
const Ref_Type_Owner Ref_Type::Owner_MIN;
const Ref_Type_Owner Ref_Type::Owner_MAX;
const int Ref_Type::Owner_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Ref_Type::kOwnerFieldNumber;
const int Ref_Type::kInstanceIdFieldNumber;
const int Ref_Type::kFacetIdxFieldNumber;
const int Ref_Type::kOwnerIpFieldNumber;
#endif  // !_MSC_VER

Ref_Type::Ref_Type()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ref_Type::InitAsDefaultInstance() {
}

Ref_Type::Ref_Type(const Ref_Type& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ref_Type::SharedCtor() {
  _cached_size_ = 0;
  owner_ = 0;
  instance_id_ = 0u;
  facet_idx_ = 0u;
  owner_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ref_Type::~Ref_Type() {
  SharedDtor();
}

void Ref_Type::SharedDtor() {
  if (owner_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_ip_;
  }
  if (this != default_instance_) {
  }
}

void Ref_Type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ref_Type::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ref_Type_descriptor_;
}

const Ref_Type& Ref_Type::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Ref_Type* Ref_Type::default_instance_ = NULL;

Ref_Type* Ref_Type::New() const {
  return new Ref_Type;
}

void Ref_Type::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owner_ = 0;
    instance_id_ = 0u;
    facet_idx_ = 0u;
    if (has_owner_ip()) {
      if (owner_ip_ != &::google::protobuf::internal::kEmptyString) {
        owner_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ref_Type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .reef.Ref_Type.Owner owner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::reef::Ref_Type_Owner_IsValid(value)) {
            set_owner(static_cast< ::reef::Ref_Type_Owner >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instance_id;
        break;
      }
      
      // required uint32 instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_facet_idx;
        break;
      }
      
      // required uint32 facet_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facet_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facet_idx_)));
          set_has_facet_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_owner_ip;
        break;
      }
      
      // optional string owner_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->owner_ip().data(), this->owner_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ref_Type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .reef.Ref_Type.Owner owner = 1;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->owner(), output);
  }
  
  // required uint32 instance_id = 2;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->instance_id(), output);
  }
  
  // required uint32 facet_idx = 3;
  if (has_facet_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->facet_idx(), output);
  }
  
  // optional string owner_ip = 4;
  if (has_owner_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_ip().data(), this->owner_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->owner_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ref_Type::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .reef.Ref_Type.Owner owner = 1;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->owner(), target);
  }
  
  // required uint32 instance_id = 2;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->instance_id(), target);
  }
  
  // required uint32 facet_idx = 3;
  if (has_facet_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->facet_idx(), target);
  }
  
  // optional string owner_ip = 4;
  if (has_owner_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_ip().data(), this->owner_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->owner_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ref_Type::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .reef.Ref_Type.Owner owner = 1;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->owner());
    }
    
    // required uint32 instance_id = 2;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }
    
    // required uint32 facet_idx = 3;
    if (has_facet_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facet_idx());
    }
    
    // optional string owner_ip = 4;
    if (has_owner_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ref_Type::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ref_Type* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ref_Type*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ref_Type::MergeFrom(const Ref_Type& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_facet_idx()) {
      set_facet_idx(from.facet_idx());
    }
    if (from.has_owner_ip()) {
      set_owner_ip(from.owner_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ref_Type::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ref_Type::CopyFrom(const Ref_Type& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ref_Type::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Ref_Type::Swap(Ref_Type* other) {
  if (other != this) {
    std::swap(owner_, other->owner_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(facet_idx_, other->facet_idx_);
    std::swap(owner_ip_, other->owner_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ref_Type::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ref_Type_descriptor_;
  metadata.reflection = Ref_Type_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Message_Member::kFacetIdxFieldNumber;
const int Message_Member::kMemberIdxFieldNumber;
const int Message_Member::kArgumentsFieldNumber;
#endif  // !_MSC_VER

Message_Member::Message_Member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message_Member::InitAsDefaultInstance() {
}

Message_Member::Message_Member(const Message_Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message_Member::SharedCtor() {
  _cached_size_ = 0;
  facet_idx_ = 0u;
  member_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_Member::~Message_Member() {
  SharedDtor();
}

void Message_Member::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Message_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Member_descriptor_;
}

const Message_Member& Message_Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Message_Member* Message_Member::default_instance_ = NULL;

Message_Member* Message_Member::New() const {
  return new Message_Member;
}

void Message_Member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facet_idx_ = 0u;
    member_idx_ = 0u;
  }
  arguments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 facet_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facet_idx_)));
          set_has_facet_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_member_idx;
        break;
      }
      
      // required uint32 member_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_idx_)));
          set_has_member_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_arguments;
        break;
      }
      
      // repeated .reef.Argument arguments = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_arguments;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 facet_idx = 1;
  if (has_facet_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facet_idx(), output);
  }
  
  // required uint32 member_idx = 2;
  if (has_member_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->member_idx(), output);
  }
  
  // repeated .reef.Argument arguments = 4;
  for (int i = 0; i < this->arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arguments(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message_Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 facet_idx = 1;
  if (has_facet_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facet_idx(), target);
  }
  
  // required uint32 member_idx = 2;
  if (has_member_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->member_idx(), target);
  }
  
  // repeated .reef.Argument arguments = 4;
  for (int i = 0; i < this->arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arguments(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message_Member::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 facet_idx = 1;
    if (has_facet_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facet_idx());
    }
    
    // required uint32 member_idx = 2;
    if (has_member_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_idx());
    }
    
  }
  // repeated .reef.Argument arguments = 4;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Member::MergeFrom(const Message_Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  arguments_.MergeFrom(from.arguments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facet_idx()) {
      set_facet_idx(from.facet_idx());
    }
    if (from.has_member_idx()) {
      set_member_idx(from.member_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Member::CopyFrom(const Message_Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < arguments_size(); i++) {
    if (!this->arguments(i).IsInitialized()) return false;
  }
  return true;
}

void Message_Member::Swap(Message_Member* other) {
  if (other != this) {
    std::swap(facet_idx_, other->facet_idx_);
    std::swap(member_idx_, other->member_idx_);
    arguments_.Swap(&other->arguments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_Member_descriptor_;
  metadata.reflection = Message_Member_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Message_New_Inst::kNewInstanceTypeFieldNumber;
#endif  // !_MSC_VER

Message_New_Inst::Message_New_Inst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message_New_Inst::InitAsDefaultInstance() {
}

Message_New_Inst::Message_New_Inst(const Message_New_Inst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message_New_Inst::SharedCtor() {
  _cached_size_ = 0;
  new_instance_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_New_Inst::~Message_New_Inst() {
  SharedDtor();
}

void Message_New_Inst::SharedDtor() {
  if (new_instance_type_ != &::google::protobuf::internal::kEmptyString) {
    delete new_instance_type_;
  }
  if (this != default_instance_) {
  }
}

void Message_New_Inst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_New_Inst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_New_Inst_descriptor_;
}

const Message_New_Inst& Message_New_Inst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Message_New_Inst* Message_New_Inst::default_instance_ = NULL;

Message_New_Inst* Message_New_Inst::New() const {
  return new Message_New_Inst;
}

void Message_New_Inst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_new_instance_type()) {
      if (new_instance_type_ != &::google::protobuf::internal::kEmptyString) {
        new_instance_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_New_Inst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string new_instance_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_instance_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_instance_type().data(), this->new_instance_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message_New_Inst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string new_instance_type = 1;
  if (has_new_instance_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_instance_type().data(), this->new_instance_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->new_instance_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message_New_Inst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string new_instance_type = 1;
  if (has_new_instance_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_instance_type().data(), this->new_instance_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->new_instance_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message_New_Inst::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string new_instance_type = 1;
    if (has_new_instance_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_instance_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_New_Inst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_New_Inst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_New_Inst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_New_Inst::MergeFrom(const Message_New_Inst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_instance_type()) {
      set_new_instance_type(from.new_instance_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_New_Inst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_New_Inst::CopyFrom(const Message_New_Inst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_New_Inst::IsInitialized() const {
  
  return true;
}

void Message_New_Inst::Swap(Message_New_Inst* other) {
  if (other != this) {
    std::swap(new_instance_type_, other->new_instance_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_New_Inst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_New_Inst_descriptor_;
  metadata.reflection = Message_New_Inst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Message_Acc_Inst::kIncrementFieldNumber;
const int Message_Acc_Inst::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

Message_Acc_Inst::Message_Acc_Inst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message_Acc_Inst::InitAsDefaultInstance() {
}

Message_Acc_Inst::Message_Acc_Inst(const Message_Acc_Inst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message_Acc_Inst::SharedCtor() {
  _cached_size_ = 0;
  increment_ = false;
  instance_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_Acc_Inst::~Message_Acc_Inst() {
  SharedDtor();
}

void Message_Acc_Inst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Message_Acc_Inst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Acc_Inst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Acc_Inst_descriptor_;
}

const Message_Acc_Inst& Message_Acc_Inst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Message_Acc_Inst* Message_Acc_Inst::default_instance_ = NULL;

Message_Acc_Inst* Message_Acc_Inst::New() const {
  return new Message_Acc_Inst;
}

void Message_Acc_Inst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    increment_ = false;
    instance_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Acc_Inst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool increment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &increment_)));
          set_has_increment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instance_id;
        break;
      }
      
      // required uint32 instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message_Acc_Inst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool increment = 1;
  if (has_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->increment(), output);
  }
  
  // required uint32 instance_id = 2;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->instance_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message_Acc_Inst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool increment = 1;
  if (has_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->increment(), target);
  }
  
  // required uint32 instance_id = 2;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->instance_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message_Acc_Inst::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool increment = 1;
    if (has_increment()) {
      total_size += 1 + 1;
    }
    
    // required uint32 instance_id = 2;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Acc_Inst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Acc_Inst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Acc_Inst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Acc_Inst::MergeFrom(const Message_Acc_Inst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_increment()) {
      set_increment(from.increment());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Acc_Inst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Acc_Inst::CopyFrom(const Message_Acc_Inst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Acc_Inst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Message_Acc_Inst::Swap(Message_Acc_Inst* other) {
  if (other != this) {
    std::swap(increment_, other->increment_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_Acc_Inst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_Acc_Inst_descriptor_;
  metadata.reflection = Message_Acc_Inst_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Type_descriptor_;
}
bool Message_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_Type Message::MSG_NEW_INST;
const Message_Type Message::MSG_ACCESS_INST;
const Message_Type Message::MSG_CALL;
const Message_Type Message::MSG_FIELD;
const Message_Type Message::Type_MIN;
const Message_Type Message::Type_MAX;
const int Message::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Message::kMsgTypeFieldNumber;
const int Message::kInstanceIdFieldNumber;
const int Message::kHasReturnFieldNumber;
const int Message::kMsgNewInstFieldNumber;
const int Message::kMsgAccInstFieldNumber;
const int Message::kMsgMemberFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
  msg_new_inst_ = const_cast< ::reef::Message_New_Inst*>(&::reef::Message_New_Inst::default_instance());
  msg_acc_inst_ = const_cast< ::reef::Message_Acc_Inst*>(&::reef::Message_Acc_Inst::default_instance());
  msg_member_ = const_cast< ::reef::Message_Member*>(&::reef::Message_Member::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  instance_id_ = 0u;
  has_return_ = false;
  msg_new_inst_ = NULL;
  msg_acc_inst_ = NULL;
  msg_member_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete msg_new_inst_;
    delete msg_acc_inst_;
    delete msg_member_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0;
    instance_id_ = 0u;
    has_return_ = false;
    if (has_msg_new_inst()) {
      if (msg_new_inst_ != NULL) msg_new_inst_->::reef::Message_New_Inst::Clear();
    }
    if (has_msg_acc_inst()) {
      if (msg_acc_inst_ != NULL) msg_acc_inst_->::reef::Message_Acc_Inst::Clear();
    }
    if (has_msg_member()) {
      if (msg_member_ != NULL) msg_member_->::reef::Message_Member::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .reef.Message.Type msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::reef::Message_Type_IsValid(value)) {
            set_msg_type(static_cast< ::reef::Message_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instance_id;
        break;
      }
      
      // required uint32 instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_has_return;
        break;
      }
      
      // required bool has_return = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_return:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_return_)));
          set_has_has_return();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg_new_inst;
        break;
      }
      
      // optional .reef.Message_New_Inst msg_new_inst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_new_inst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_new_inst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_msg_acc_inst;
        break;
      }
      
      // optional .reef.Message_Acc_Inst msg_acc_inst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_acc_inst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_acc_inst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_msg_member;
        break;
      }
      
      // optional .reef.Message_Member msg_member = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .reef.Message.Type msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }
  
  // required uint32 instance_id = 2;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->instance_id(), output);
  }
  
  // required bool has_return = 3;
  if (has_has_return()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_return(), output);
  }
  
  // optional .reef.Message_New_Inst msg_new_inst = 4;
  if (has_msg_new_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->msg_new_inst(), output);
  }
  
  // optional .reef.Message_Acc_Inst msg_acc_inst = 5;
  if (has_msg_acc_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->msg_acc_inst(), output);
  }
  
  // optional .reef.Message_Member msg_member = 6;
  if (has_msg_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->msg_member(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .reef.Message.Type msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }
  
  // required uint32 instance_id = 2;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->instance_id(), target);
  }
  
  // required bool has_return = 3;
  if (has_has_return()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_return(), target);
  }
  
  // optional .reef.Message_New_Inst msg_new_inst = 4;
  if (has_msg_new_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msg_new_inst(), target);
  }
  
  // optional .reef.Message_Acc_Inst msg_acc_inst = 5;
  if (has_msg_acc_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->msg_acc_inst(), target);
  }
  
  // optional .reef.Message_Member msg_member = 6;
  if (has_msg_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->msg_member(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .reef.Message.Type msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }
    
    // required uint32 instance_id = 2;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }
    
    // required bool has_return = 3;
    if (has_has_return()) {
      total_size += 1 + 1;
    }
    
    // optional .reef.Message_New_Inst msg_new_inst = 4;
    if (has_msg_new_inst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_new_inst());
    }
    
    // optional .reef.Message_Acc_Inst msg_acc_inst = 5;
    if (has_msg_acc_inst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_acc_inst());
    }
    
    // optional .reef.Message_Member msg_member = 6;
    if (has_msg_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_member());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_has_return()) {
      set_has_return(from.has_return());
    }
    if (from.has_msg_new_inst()) {
      mutable_msg_new_inst()->::reef::Message_New_Inst::MergeFrom(from.msg_new_inst());
    }
    if (from.has_msg_acc_inst()) {
      mutable_msg_acc_inst()->::reef::Message_Acc_Inst::MergeFrom(from.msg_acc_inst());
    }
    if (from.has_msg_member()) {
      mutable_msg_member()->::reef::Message_Member::MergeFrom(from.msg_member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_msg_acc_inst()) {
    if (!this->msg_acc_inst().IsInitialized()) return false;
  }
  if (has_msg_member()) {
    if (!this->msg_member().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(has_return_, other->has_return_);
    std::swap(msg_new_inst_, other->msg_new_inst_);
    std::swap(msg_acc_inst_, other->msg_acc_inst_);
    std::swap(msg_member_, other->msg_member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace reef

// @@protoc_insertion_point(global_scope)
