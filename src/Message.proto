package reef;

// Data types (information transfer):
message DataContainer
{
	optional bool boolean = 1;
	optional string str = 2;
	optional double numeric = 3;
}

message Argument
{
	repeated DataContainer data = 1;
}

message VirtualAddress
{
	required int32 address = 1;
}

// Commands (triggers actions into destination nodes)
message Message_Call
{
	required bool hasReturn = 1; // whether this call message demands a return
	required uint32 serviceIndex = 2;
	required uint32 memberIndex = 3;
	repeated Argument arguments = 4;
}

message Message_Field
{
	required bool isSetField = 1; // whether this message is to set or get a field
	required uint32 serviceIndex = 2;
	required uint32 fieldIndex = 3;
	optional Argument value = 4;
}

message Message_New
{
	required string componentTypeName = 1;
}

message Message_Return
{
	required Argument returnValue = 1;
}

message Message 
{
	enum Type
	{
		TYPE_NEW = 0;
		TYPE_FIELD = 1;
		TYPE_CALL = 2;
		TYPE_RETURN = 3;
		TYPE_OTHER = 4;
	}
	
	required Type type = 1;
	
	required uint32 destination = 2;
	
	optional Message_New msgNew = 3;
	optional Message_Field msgField = 4;
	optional Message_Call msgCall = 5;
	optional Message_Return msgReturn = 6;
}

