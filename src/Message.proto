package reef;

// Data types (information transfer):
message DataContainer
{
	optional bool boolean = 1;
	optional string str = 2;
	optional double numeric = 3;
	optional RefType refType = 4;
}

message Argument
{
	repeated DataContainer data = 1;
}

message RefType
{
	enum OwnerType
	{
		SELF = 0;
		RECEIVER = 1;
		THIRD_PARTY = 2;
	}
	required OwnerType owner = 1;
	required uint32 virtualAddress = 2;
	required uint32 interfaceIndex = 3;
	optional string ownerIP = 4;
}

// Commands (triggers actions into destination nodes)
message Message_Member
{
	required bool hasReturn = 1; // whether this demands a return (call and getfield)
	required uint32 serviceIndex = 2;
	required uint32 memberIndex = 3;
	repeated Argument arguments = 4;
}

message Message_New
{
	required string componentTypeName = 1;
}

message Message 
{
	enum Type
	{
		TYPE_NEW = 0;
		TYPE_FIELD = 1;
		TYPE_CALL = 2;
		TYPE_RETURN = 3;
		TYPE_OTHER = 4;
	}
	
	required Type type = 1;
	
	required uint32 destination = 2;
	
	optional Message_New msgNew = 3;
	optional Message_Member msgMember = 4;
}

