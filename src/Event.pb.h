// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Event.proto

#ifndef PROTOBUF_Event_2eproto__INCLUDED
#define PROTOBUF_Event_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace reef {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Event_2eproto();
void protobuf_AssignDesc_Event_2eproto();
void protobuf_ShutdownFile_Event_2eproto();

class DataArgument;
class EventCall;
class EventField;
class EventReturn;
class EventCreate;
class ResultCreate;
class Event;

enum Event_EventType {
  Event_EventType_TYPE_CREATE = 0,
  Event_EventType_TYPE_CREATE_RESULT = 1,
  Event_EventType_TYPE_CALL = 2,
  Event_EventType_TYPE_CALL_RETURN = 3,
  Event_EventType_TYPE_FIELD = 4
};
bool Event_EventType_IsValid(int value);
const Event_EventType Event_EventType_EventType_MIN = Event_EventType_TYPE_CREATE;
const Event_EventType Event_EventType_EventType_MAX = Event_EventType_TYPE_FIELD;
const int Event_EventType_EventType_ARRAYSIZE = Event_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Event_EventType_descriptor();
inline const ::std::string& Event_EventType_Name(Event_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Event_EventType_descriptor(), value);
}
inline bool Event_EventType_Parse(
    const ::std::string& name, Event_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Event_EventType>(
    Event_EventType_descriptor(), name, value);
}
// ===================================================================

class DataArgument : public ::google::protobuf::Message {
 public:
  DataArgument();
  virtual ~DataArgument();
  
  DataArgument(const DataArgument& from);
  
  inline DataArgument& operator=(const DataArgument& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataArgument& default_instance();
  
  void Swap(DataArgument* other);
  
  // implements Message ----------------------------------------------
  
  DataArgument* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataArgument& from);
  void MergeFrom(const DataArgument& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 dummy = 1;
  inline bool has_dummy() const;
  inline void clear_dummy();
  static const int kDummyFieldNumber = 1;
  inline ::google::protobuf::int32 dummy() const;
  inline void set_dummy(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:reef.DataArgument)
 private:
  inline void set_has_dummy();
  inline void clear_has_dummy();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 dummy_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();
  
  void InitAsDefaultInstance();
  static DataArgument* default_instance_;
};
// -------------------------------------------------------------------

class EventCall : public ::google::protobuf::Message {
 public:
  EventCall();
  virtual ~EventCall();
  
  EventCall(const EventCall& from);
  
  inline EventCall& operator=(const EventCall& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventCall& default_instance();
  
  void Swap(EventCall* other);
  
  // implements Message ----------------------------------------------
  
  EventCall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventCall& from);
  void MergeFrom(const EventCall& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool hasReturn = 1;
  inline bool has_hasreturn() const;
  inline void clear_hasreturn();
  static const int kHasReturnFieldNumber = 1;
  inline bool hasreturn() const;
  inline void set_hasreturn(bool value);
  
  // required uint32 serviceIndex = 2;
  inline bool has_serviceindex() const;
  inline void clear_serviceindex();
  static const int kServiceIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 serviceindex() const;
  inline void set_serviceindex(::google::protobuf::uint32 value);
  
  // required uint32 methodIndex = 3;
  inline bool has_methodindex() const;
  inline void clear_methodindex();
  static const int kMethodIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 methodindex() const;
  inline void set_methodindex(::google::protobuf::uint32 value);
  
  // repeated .reef.DataArgument arguments = 4;
  inline int arguments_size() const;
  inline void clear_arguments();
  static const int kArgumentsFieldNumber = 4;
  inline const ::reef::DataArgument& arguments(int index) const;
  inline ::reef::DataArgument* mutable_arguments(int index);
  inline ::reef::DataArgument* add_arguments();
  inline const ::google::protobuf::RepeatedPtrField< ::reef::DataArgument >&
      arguments() const;
  inline ::google::protobuf::RepeatedPtrField< ::reef::DataArgument >*
      mutable_arguments();
  
  // @@protoc_insertion_point(class_scope:reef.EventCall)
 private:
  inline void set_has_hasreturn();
  inline void clear_has_hasreturn();
  inline void set_has_serviceindex();
  inline void clear_has_serviceindex();
  inline void set_has_methodindex();
  inline void clear_has_methodindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool hasreturn_;
  ::google::protobuf::uint32 serviceindex_;
  ::google::protobuf::RepeatedPtrField< ::reef::DataArgument > arguments_;
  ::google::protobuf::uint32 methodindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();
  
  void InitAsDefaultInstance();
  static EventCall* default_instance_;
};
// -------------------------------------------------------------------

class EventField : public ::google::protobuf::Message {
 public:
  EventField();
  virtual ~EventField();
  
  EventField(const EventField& from);
  
  inline EventField& operator=(const EventField& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventField& default_instance();
  
  void Swap(EventField* other);
  
  // implements Message ----------------------------------------------
  
  EventField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventField& from);
  void MergeFrom(const EventField& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool isSetField = 1;
  inline bool has_issetfield() const;
  inline void clear_issetfield();
  static const int kIsSetFieldFieldNumber = 1;
  inline bool issetfield() const;
  inline void set_issetfield(bool value);
  
  // required uint32 serviceIndex = 2;
  inline bool has_serviceindex() const;
  inline void clear_serviceindex();
  static const int kServiceIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 serviceindex() const;
  inline void set_serviceindex(::google::protobuf::uint32 value);
  
  // required uint32 fieldIndex = 3;
  inline bool has_fieldindex() const;
  inline void clear_fieldindex();
  static const int kFieldIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 fieldindex() const;
  inline void set_fieldindex(::google::protobuf::uint32 value);
  
  // required .reef.DataArgument value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::reef::DataArgument& value() const;
  inline ::reef::DataArgument* mutable_value();
  inline ::reef::DataArgument* release_value();
  
  // @@protoc_insertion_point(class_scope:reef.EventField)
 private:
  inline void set_has_issetfield();
  inline void clear_has_issetfield();
  inline void set_has_serviceindex();
  inline void clear_has_serviceindex();
  inline void set_has_fieldindex();
  inline void clear_has_fieldindex();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool issetfield_;
  ::google::protobuf::uint32 serviceindex_;
  ::reef::DataArgument* value_;
  ::google::protobuf::uint32 fieldindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();
  
  void InitAsDefaultInstance();
  static EventField* default_instance_;
};
// -------------------------------------------------------------------

class EventReturn : public ::google::protobuf::Message {
 public:
  EventReturn();
  virtual ~EventReturn();
  
  EventReturn(const EventReturn& from);
  
  inline EventReturn& operator=(const EventReturn& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventReturn& default_instance();
  
  void Swap(EventReturn* other);
  
  // implements Message ----------------------------------------------
  
  EventReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventReturn& from);
  void MergeFrom(const EventReturn& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .reef.DataArgument arguments = 1;
  inline int arguments_size() const;
  inline void clear_arguments();
  static const int kArgumentsFieldNumber = 1;
  inline const ::reef::DataArgument& arguments(int index) const;
  inline ::reef::DataArgument* mutable_arguments(int index);
  inline ::reef::DataArgument* add_arguments();
  inline const ::google::protobuf::RepeatedPtrField< ::reef::DataArgument >&
      arguments() const;
  inline ::google::protobuf::RepeatedPtrField< ::reef::DataArgument >*
      mutable_arguments();
  
  // @@protoc_insertion_point(class_scope:reef.EventReturn)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::reef::DataArgument > arguments_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();
  
  void InitAsDefaultInstance();
  static EventReturn* default_instance_;
};
// -------------------------------------------------------------------

class EventCreate : public ::google::protobuf::Message {
 public:
  EventCreate();
  virtual ~EventCreate();
  
  EventCreate(const EventCreate& from);
  
  inline EventCreate& operator=(const EventCreate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventCreate& default_instance();
  
  void Swap(EventCreate* other);
  
  // implements Message ----------------------------------------------
  
  EventCreate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventCreate& from);
  void MergeFrom(const EventCreate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string componentTypeName = 1;
  inline bool has_componenttypename() const;
  inline void clear_componenttypename();
  static const int kComponentTypeNameFieldNumber = 1;
  inline const ::std::string& componenttypename() const;
  inline void set_componenttypename(const ::std::string& value);
  inline void set_componenttypename(const char* value);
  inline void set_componenttypename(const char* value, size_t size);
  inline ::std::string* mutable_componenttypename();
  inline ::std::string* release_componenttypename();
  
  // @@protoc_insertion_point(class_scope:reef.EventCreate)
 private:
  inline void set_has_componenttypename();
  inline void clear_has_componenttypename();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* componenttypename_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();
  
  void InitAsDefaultInstance();
  static EventCreate* default_instance_;
};
// -------------------------------------------------------------------

class ResultCreate : public ::google::protobuf::Message {
 public:
  ResultCreate();
  virtual ~ResultCreate();
  
  ResultCreate(const ResultCreate& from);
  
  inline ResultCreate& operator=(const ResultCreate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultCreate& default_instance();
  
  void Swap(ResultCreate* other);
  
  // implements Message ----------------------------------------------
  
  ResultCreate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultCreate& from);
  void MergeFrom(const ResultCreate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 virtualAddress = 1;
  inline bool has_virtualaddress() const;
  inline void clear_virtualaddress();
  static const int kVirtualAddressFieldNumber = 1;
  inline ::google::protobuf::int32 virtualaddress() const;
  inline void set_virtualaddress(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:reef.ResultCreate)
 private:
  inline void set_has_virtualaddress();
  inline void clear_has_virtualaddress();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 virtualaddress_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();
  
  void InitAsDefaultInstance();
  static ResultCreate* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message {
 public:
  Event();
  virtual ~Event();
  
  Event(const Event& from);
  
  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();
  
  void Swap(Event* other);
  
  // implements Message ----------------------------------------------
  
  Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Event_EventType EventType;
  static const EventType TYPE_CREATE = Event_EventType_TYPE_CREATE;
  static const EventType TYPE_CREATE_RESULT = Event_EventType_TYPE_CREATE_RESULT;
  static const EventType TYPE_CALL = Event_EventType_TYPE_CALL;
  static const EventType TYPE_CALL_RETURN = Event_EventType_TYPE_CALL_RETURN;
  static const EventType TYPE_FIELD = Event_EventType_TYPE_FIELD;
  static inline bool EventType_IsValid(int value) {
    return Event_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    Event_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    Event_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    Event_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return Event_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return Event_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return Event_EventType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint32 eventType = 1;
  inline bool has_eventtype() const;
  inline void clear_eventtype();
  static const int kEventTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 eventtype() const;
  inline void set_eventtype(::google::protobuf::uint32 value);
  
  // required uint32 destination = 2;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 2;
  inline ::google::protobuf::uint32 destination() const;
  inline void set_destination(::google::protobuf::uint32 value);
  
  // optional .reef.EventCreate eventCreate = 3;
  inline bool has_eventcreate() const;
  inline void clear_eventcreate();
  static const int kEventCreateFieldNumber = 3;
  inline const ::reef::EventCreate& eventcreate() const;
  inline ::reef::EventCreate* mutable_eventcreate();
  inline ::reef::EventCreate* release_eventcreate();
  
  // optional .reef.ResultCreate resultCreate = 4;
  inline bool has_resultcreate() const;
  inline void clear_resultcreate();
  static const int kResultCreateFieldNumber = 4;
  inline const ::reef::ResultCreate& resultcreate() const;
  inline ::reef::ResultCreate* mutable_resultcreate();
  inline ::reef::ResultCreate* release_resultcreate();
  
  // optional .reef.EventCall eventCall = 5;
  inline bool has_eventcall() const;
  inline void clear_eventcall();
  static const int kEventCallFieldNumber = 5;
  inline const ::reef::EventCall& eventcall() const;
  inline ::reef::EventCall* mutable_eventcall();
  inline ::reef::EventCall* release_eventcall();
  
  // optional .reef.EventReturn eventReturn = 6;
  inline bool has_eventreturn() const;
  inline void clear_eventreturn();
  static const int kEventReturnFieldNumber = 6;
  inline const ::reef::EventReturn& eventreturn() const;
  inline ::reef::EventReturn* mutable_eventreturn();
  inline ::reef::EventReturn* release_eventreturn();
  
  // optional .reef.EventField eventField = 7;
  inline bool has_eventfield() const;
  inline void clear_eventfield();
  static const int kEventFieldFieldNumber = 7;
  inline const ::reef::EventField& eventfield() const;
  inline ::reef::EventField* mutable_eventfield();
  inline ::reef::EventField* release_eventfield();
  
  // @@protoc_insertion_point(class_scope:reef.Event)
 private:
  inline void set_has_eventtype();
  inline void clear_has_eventtype();
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_eventcreate();
  inline void clear_has_eventcreate();
  inline void set_has_resultcreate();
  inline void clear_has_resultcreate();
  inline void set_has_eventcall();
  inline void clear_has_eventcall();
  inline void set_has_eventreturn();
  inline void clear_has_eventreturn();
  inline void set_has_eventfield();
  inline void clear_has_eventfield();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 eventtype_;
  ::google::protobuf::uint32 destination_;
  ::reef::EventCreate* eventcreate_;
  ::reef::ResultCreate* resultcreate_;
  ::reef::EventCall* eventcall_;
  ::reef::EventReturn* eventreturn_;
  ::reef::EventField* eventfield_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();
  
  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// ===================================================================


// ===================================================================

// DataArgument

// required int32 dummy = 1;
inline bool DataArgument::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataArgument::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataArgument::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataArgument::clear_dummy() {
  dummy_ = 0;
  clear_has_dummy();
}
inline ::google::protobuf::int32 DataArgument::dummy() const {
  return dummy_;
}
inline void DataArgument::set_dummy(::google::protobuf::int32 value) {
  set_has_dummy();
  dummy_ = value;
}

// -------------------------------------------------------------------

// EventCall

// required bool hasReturn = 1;
inline bool EventCall::has_hasreturn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventCall::set_has_hasreturn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventCall::clear_has_hasreturn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventCall::clear_hasreturn() {
  hasreturn_ = false;
  clear_has_hasreturn();
}
inline bool EventCall::hasreturn() const {
  return hasreturn_;
}
inline void EventCall::set_hasreturn(bool value) {
  set_has_hasreturn();
  hasreturn_ = value;
}

// required uint32 serviceIndex = 2;
inline bool EventCall::has_serviceindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventCall::set_has_serviceindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventCall::clear_has_serviceindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventCall::clear_serviceindex() {
  serviceindex_ = 0u;
  clear_has_serviceindex();
}
inline ::google::protobuf::uint32 EventCall::serviceindex() const {
  return serviceindex_;
}
inline void EventCall::set_serviceindex(::google::protobuf::uint32 value) {
  set_has_serviceindex();
  serviceindex_ = value;
}

// required uint32 methodIndex = 3;
inline bool EventCall::has_methodindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventCall::set_has_methodindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EventCall::clear_has_methodindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EventCall::clear_methodindex() {
  methodindex_ = 0u;
  clear_has_methodindex();
}
inline ::google::protobuf::uint32 EventCall::methodindex() const {
  return methodindex_;
}
inline void EventCall::set_methodindex(::google::protobuf::uint32 value) {
  set_has_methodindex();
  methodindex_ = value;
}

// repeated .reef.DataArgument arguments = 4;
inline int EventCall::arguments_size() const {
  return arguments_.size();
}
inline void EventCall::clear_arguments() {
  arguments_.Clear();
}
inline const ::reef::DataArgument& EventCall::arguments(int index) const {
  return arguments_.Get(index);
}
inline ::reef::DataArgument* EventCall::mutable_arguments(int index) {
  return arguments_.Mutable(index);
}
inline ::reef::DataArgument* EventCall::add_arguments() {
  return arguments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::reef::DataArgument >&
EventCall::arguments() const {
  return arguments_;
}
inline ::google::protobuf::RepeatedPtrField< ::reef::DataArgument >*
EventCall::mutable_arguments() {
  return &arguments_;
}

// -------------------------------------------------------------------

// EventField

// required bool isSetField = 1;
inline bool EventField::has_issetfield() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventField::set_has_issetfield() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventField::clear_has_issetfield() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventField::clear_issetfield() {
  issetfield_ = false;
  clear_has_issetfield();
}
inline bool EventField::issetfield() const {
  return issetfield_;
}
inline void EventField::set_issetfield(bool value) {
  set_has_issetfield();
  issetfield_ = value;
}

// required uint32 serviceIndex = 2;
inline bool EventField::has_serviceindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventField::set_has_serviceindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventField::clear_has_serviceindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventField::clear_serviceindex() {
  serviceindex_ = 0u;
  clear_has_serviceindex();
}
inline ::google::protobuf::uint32 EventField::serviceindex() const {
  return serviceindex_;
}
inline void EventField::set_serviceindex(::google::protobuf::uint32 value) {
  set_has_serviceindex();
  serviceindex_ = value;
}

// required uint32 fieldIndex = 3;
inline bool EventField::has_fieldindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventField::set_has_fieldindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EventField::clear_has_fieldindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EventField::clear_fieldindex() {
  fieldindex_ = 0u;
  clear_has_fieldindex();
}
inline ::google::protobuf::uint32 EventField::fieldindex() const {
  return fieldindex_;
}
inline void EventField::set_fieldindex(::google::protobuf::uint32 value) {
  set_has_fieldindex();
  fieldindex_ = value;
}

// required .reef.DataArgument value = 4;
inline bool EventField::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EventField::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EventField::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EventField::clear_value() {
  if (value_ != NULL) value_->::reef::DataArgument::Clear();
  clear_has_value();
}
inline const ::reef::DataArgument& EventField::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::reef::DataArgument* EventField::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::reef::DataArgument;
  return value_;
}
inline ::reef::DataArgument* EventField::release_value() {
  clear_has_value();
  ::reef::DataArgument* temp = value_;
  value_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// EventReturn

// repeated .reef.DataArgument arguments = 1;
inline int EventReturn::arguments_size() const {
  return arguments_.size();
}
inline void EventReturn::clear_arguments() {
  arguments_.Clear();
}
inline const ::reef::DataArgument& EventReturn::arguments(int index) const {
  return arguments_.Get(index);
}
inline ::reef::DataArgument* EventReturn::mutable_arguments(int index) {
  return arguments_.Mutable(index);
}
inline ::reef::DataArgument* EventReturn::add_arguments() {
  return arguments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::reef::DataArgument >&
EventReturn::arguments() const {
  return arguments_;
}
inline ::google::protobuf::RepeatedPtrField< ::reef::DataArgument >*
EventReturn::mutable_arguments() {
  return &arguments_;
}

// -------------------------------------------------------------------

// EventCreate

// required string componentTypeName = 1;
inline bool EventCreate::has_componenttypename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventCreate::set_has_componenttypename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventCreate::clear_has_componenttypename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventCreate::clear_componenttypename() {
  if (componenttypename_ != &::google::protobuf::internal::kEmptyString) {
    componenttypename_->clear();
  }
  clear_has_componenttypename();
}
inline const ::std::string& EventCreate::componenttypename() const {
  return *componenttypename_;
}
inline void EventCreate::set_componenttypename(const ::std::string& value) {
  set_has_componenttypename();
  if (componenttypename_ == &::google::protobuf::internal::kEmptyString) {
    componenttypename_ = new ::std::string;
  }
  componenttypename_->assign(value);
}
inline void EventCreate::set_componenttypename(const char* value) {
  set_has_componenttypename();
  if (componenttypename_ == &::google::protobuf::internal::kEmptyString) {
    componenttypename_ = new ::std::string;
  }
  componenttypename_->assign(value);
}
inline void EventCreate::set_componenttypename(const char* value, size_t size) {
  set_has_componenttypename();
  if (componenttypename_ == &::google::protobuf::internal::kEmptyString) {
    componenttypename_ = new ::std::string;
  }
  componenttypename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventCreate::mutable_componenttypename() {
  set_has_componenttypename();
  if (componenttypename_ == &::google::protobuf::internal::kEmptyString) {
    componenttypename_ = new ::std::string;
  }
  return componenttypename_;
}
inline ::std::string* EventCreate::release_componenttypename() {
  clear_has_componenttypename();
  if (componenttypename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = componenttypename_;
    componenttypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ResultCreate

// required int32 virtualAddress = 1;
inline bool ResultCreate::has_virtualaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultCreate::set_has_virtualaddress() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultCreate::clear_has_virtualaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultCreate::clear_virtualaddress() {
  virtualaddress_ = 0;
  clear_has_virtualaddress();
}
inline ::google::protobuf::int32 ResultCreate::virtualaddress() const {
  return virtualaddress_;
}
inline void ResultCreate::set_virtualaddress(::google::protobuf::int32 value) {
  set_has_virtualaddress();
  virtualaddress_ = value;
}

// -------------------------------------------------------------------

// Event

// required uint32 eventType = 1;
inline bool Event::has_eventtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_eventtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_eventtype() {
  eventtype_ = 0u;
  clear_has_eventtype();
}
inline ::google::protobuf::uint32 Event::eventtype() const {
  return eventtype_;
}
inline void Event::set_eventtype(::google::protobuf::uint32 value) {
  set_has_eventtype();
  eventtype_ = value;
}

// required uint32 destination = 2;
inline bool Event::has_destination() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_destination() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_destination() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_destination() {
  destination_ = 0u;
  clear_has_destination();
}
inline ::google::protobuf::uint32 Event::destination() const {
  return destination_;
}
inline void Event::set_destination(::google::protobuf::uint32 value) {
  set_has_destination();
  destination_ = value;
}

// optional .reef.EventCreate eventCreate = 3;
inline bool Event::has_eventcreate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_eventcreate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_eventcreate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_eventcreate() {
  if (eventcreate_ != NULL) eventcreate_->::reef::EventCreate::Clear();
  clear_has_eventcreate();
}
inline const ::reef::EventCreate& Event::eventcreate() const {
  return eventcreate_ != NULL ? *eventcreate_ : *default_instance_->eventcreate_;
}
inline ::reef::EventCreate* Event::mutable_eventcreate() {
  set_has_eventcreate();
  if (eventcreate_ == NULL) eventcreate_ = new ::reef::EventCreate;
  return eventcreate_;
}
inline ::reef::EventCreate* Event::release_eventcreate() {
  clear_has_eventcreate();
  ::reef::EventCreate* temp = eventcreate_;
  eventcreate_ = NULL;
  return temp;
}

// optional .reef.ResultCreate resultCreate = 4;
inline bool Event::has_resultcreate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event::set_has_resultcreate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event::clear_has_resultcreate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event::clear_resultcreate() {
  if (resultcreate_ != NULL) resultcreate_->::reef::ResultCreate::Clear();
  clear_has_resultcreate();
}
inline const ::reef::ResultCreate& Event::resultcreate() const {
  return resultcreate_ != NULL ? *resultcreate_ : *default_instance_->resultcreate_;
}
inline ::reef::ResultCreate* Event::mutable_resultcreate() {
  set_has_resultcreate();
  if (resultcreate_ == NULL) resultcreate_ = new ::reef::ResultCreate;
  return resultcreate_;
}
inline ::reef::ResultCreate* Event::release_resultcreate() {
  clear_has_resultcreate();
  ::reef::ResultCreate* temp = resultcreate_;
  resultcreate_ = NULL;
  return temp;
}

// optional .reef.EventCall eventCall = 5;
inline bool Event::has_eventcall() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event::set_has_eventcall() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event::clear_has_eventcall() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event::clear_eventcall() {
  if (eventcall_ != NULL) eventcall_->::reef::EventCall::Clear();
  clear_has_eventcall();
}
inline const ::reef::EventCall& Event::eventcall() const {
  return eventcall_ != NULL ? *eventcall_ : *default_instance_->eventcall_;
}
inline ::reef::EventCall* Event::mutable_eventcall() {
  set_has_eventcall();
  if (eventcall_ == NULL) eventcall_ = new ::reef::EventCall;
  return eventcall_;
}
inline ::reef::EventCall* Event::release_eventcall() {
  clear_has_eventcall();
  ::reef::EventCall* temp = eventcall_;
  eventcall_ = NULL;
  return temp;
}

// optional .reef.EventReturn eventReturn = 6;
inline bool Event::has_eventreturn() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Event::set_has_eventreturn() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Event::clear_has_eventreturn() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Event::clear_eventreturn() {
  if (eventreturn_ != NULL) eventreturn_->::reef::EventReturn::Clear();
  clear_has_eventreturn();
}
inline const ::reef::EventReturn& Event::eventreturn() const {
  return eventreturn_ != NULL ? *eventreturn_ : *default_instance_->eventreturn_;
}
inline ::reef::EventReturn* Event::mutable_eventreturn() {
  set_has_eventreturn();
  if (eventreturn_ == NULL) eventreturn_ = new ::reef::EventReturn;
  return eventreturn_;
}
inline ::reef::EventReturn* Event::release_eventreturn() {
  clear_has_eventreturn();
  ::reef::EventReturn* temp = eventreturn_;
  eventreturn_ = NULL;
  return temp;
}

// optional .reef.EventField eventField = 7;
inline bool Event::has_eventfield() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Event::set_has_eventfield() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Event::clear_has_eventfield() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Event::clear_eventfield() {
  if (eventfield_ != NULL) eventfield_->::reef::EventField::Clear();
  clear_has_eventfield();
}
inline const ::reef::EventField& Event::eventfield() const {
  return eventfield_ != NULL ? *eventfield_ : *default_instance_->eventfield_;
}
inline ::reef::EventField* Event::mutable_eventfield() {
  set_has_eventfield();
  if (eventfield_ == NULL) eventfield_ = new ::reef::EventField;
  return eventfield_;
}
inline ::reef::EventField* Event::release_eventfield() {
  clear_has_eventfield();
  ::reef::EventField* temp = eventfield_;
  eventfield_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace reef

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::reef::Event_EventType>() {
  return ::reef::Event_EventType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Event_2eproto__INCLUDED
