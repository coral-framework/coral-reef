// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace reef {

namespace {

const ::google::protobuf::Descriptor* DataArgument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataArgument_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventCall_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventField_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Event_EventType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Event_2eproto() {
  protobuf_AddDesc_Event_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Event.proto");
  GOOGLE_CHECK(file != NULL);
  DataArgument_descriptor_ = file->message_type(0);
  static const int DataArgument_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataArgument, dummy_),
  };
  DataArgument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataArgument_descriptor_,
      DataArgument::default_instance_,
      DataArgument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataArgument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataArgument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataArgument));
  EventCall_descriptor_ = file->message_type(1);
  static const int EventCall_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventCall, hasreturn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventCall, serviceindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventCall, methodindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventCall, arguments_),
  };
  EventCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventCall_descriptor_,
      EventCall::default_instance_,
      EventCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventCall));
  EventField_descriptor_ = file->message_type(2);
  static const int EventField_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventField, issetfield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventField, serviceindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventField, fieldindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventField, value_),
  };
  EventField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventField_descriptor_,
      EventField::default_instance_,
      EventField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventField));
  EventReturn_descriptor_ = file->message_type(3);
  static const int EventReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventReturn, arguments_),
  };
  EventReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventReturn_descriptor_,
      EventReturn::default_instance_,
      EventReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventReturn));
  EventCreate_descriptor_ = file->message_type(4);
  static const int EventCreate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventCreate, componenttypename_),
  };
  EventCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventCreate_descriptor_,
      EventCreate::default_instance_,
      EventCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventCreate));
  ResultCreate_descriptor_ = file->message_type(5);
  static const int ResultCreate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultCreate, virtualaddress_),
  };
  ResultCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultCreate_descriptor_,
      ResultCreate::default_instance_,
      ResultCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultCreate));
  Event_descriptor_ = file->message_type(6);
  static const int Event_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, eventcreate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, resultcreate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, eventcall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, eventreturn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, eventfield_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  Event_EventType_descriptor_ = Event_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Event_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataArgument_descriptor_, &DataArgument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventCall_descriptor_, &EventCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventField_descriptor_, &EventField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventReturn_descriptor_, &EventReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventCreate_descriptor_, &EventCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultCreate_descriptor_, &ResultCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Event_2eproto() {
  delete DataArgument::default_instance_;
  delete DataArgument_reflection_;
  delete EventCall::default_instance_;
  delete EventCall_reflection_;
  delete EventField::default_instance_;
  delete EventField_reflection_;
  delete EventReturn::default_instance_;
  delete EventReturn_reflection_;
  delete EventCreate::default_instance_;
  delete EventCreate_reflection_;
  delete ResultCreate::default_instance_;
  delete ResultCreate_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
}

void protobuf_AddDesc_Event_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Event.proto\022\004reef\"\035\n\014DataArgument\022\r\n\005d"
    "ummy\030\001 \002(\005\"p\n\tEventCall\022\021\n\thasReturn\030\001 \002"
    "(\010\022\024\n\014serviceIndex\030\002 \002(\r\022\023\n\013methodIndex\030"
    "\003 \002(\r\022%\n\targuments\030\004 \003(\0132\022.reef.DataArgu"
    "ment\"m\n\nEventField\022\022\n\nisSetField\030\001 \002(\010\022\024"
    "\n\014serviceIndex\030\002 \002(\r\022\022\n\nfieldIndex\030\003 \002(\r"
    "\022!\n\005value\030\004 \002(\0132\022.reef.DataArgument\"4\n\013E"
    "ventReturn\022%\n\targuments\030\001 \003(\0132\022.reef.Dat"
    "aArgument\"(\n\013EventCreate\022\031\n\021componentTyp"
    "eName\030\001 \002(\t\"&\n\014ResultCreate\022\026\n\016virtualAd"
    "dress\030\001 \002(\005\"\336\002\n\005Event\022\021\n\teventType\030\001 \002(\r"
    "\022\023\n\013destination\030\002 \002(\r\022&\n\013eventCreate\030\003 \001"
    "(\0132\021.reef.EventCreate\022(\n\014resultCreate\030\004 "
    "\001(\0132\022.reef.ResultCreate\022\"\n\teventCall\030\005 \001"
    "(\0132\017.reef.EventCall\022&\n\013eventReturn\030\006 \001(\013"
    "2\021.reef.EventReturn\022$\n\neventField\030\007 \001(\0132"
    "\020.reef.EventField\"i\n\tEventType\022\017\n\013TYPE_C"
    "REATE\020\000\022\026\n\022TYPE_CREATE_RESULT\020\001\022\r\n\tTYPE_"
    "CALL\020\002\022\024\n\020TYPE_CALL_RETURN\020\003\022\016\n\nTYPE_FIE"
    "LD\020\004", 764);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Event.proto", &protobuf_RegisterTypes);
  DataArgument::default_instance_ = new DataArgument();
  EventCall::default_instance_ = new EventCall();
  EventField::default_instance_ = new EventField();
  EventReturn::default_instance_ = new EventReturn();
  EventCreate::default_instance_ = new EventCreate();
  ResultCreate::default_instance_ = new ResultCreate();
  Event::default_instance_ = new Event();
  DataArgument::default_instance_->InitAsDefaultInstance();
  EventCall::default_instance_->InitAsDefaultInstance();
  EventField::default_instance_->InitAsDefaultInstance();
  EventReturn::default_instance_->InitAsDefaultInstance();
  EventCreate::default_instance_->InitAsDefaultInstance();
  ResultCreate::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Event_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Event_2eproto {
  StaticDescriptorInitializer_Event_2eproto() {
    protobuf_AddDesc_Event_2eproto();
  }
} static_descriptor_initializer_Event_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DataArgument::kDummyFieldNumber;
#endif  // !_MSC_VER

DataArgument::DataArgument()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataArgument::InitAsDefaultInstance() {
}

DataArgument::DataArgument(const DataArgument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataArgument::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataArgument::~DataArgument() {
  SharedDtor();
}

void DataArgument::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataArgument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataArgument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataArgument_descriptor_;
}

const DataArgument& DataArgument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

DataArgument* DataArgument::default_instance_ = NULL;

DataArgument* DataArgument::New() const {
  return new DataArgument;
}

void DataArgument::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataArgument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataArgument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataArgument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataArgument::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataArgument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataArgument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataArgument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataArgument::MergeFrom(const DataArgument& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataArgument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataArgument::CopyFrom(const DataArgument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataArgument::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DataArgument::Swap(DataArgument* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataArgument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataArgument_descriptor_;
  metadata.reflection = DataArgument_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventCall::kHasReturnFieldNumber;
const int EventCall::kServiceIndexFieldNumber;
const int EventCall::kMethodIndexFieldNumber;
const int EventCall::kArgumentsFieldNumber;
#endif  // !_MSC_VER

EventCall::EventCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventCall::InitAsDefaultInstance() {
}

EventCall::EventCall(const EventCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventCall::SharedCtor() {
  _cached_size_ = 0;
  hasreturn_ = false;
  serviceindex_ = 0u;
  methodindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventCall::~EventCall() {
  SharedDtor();
}

void EventCall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventCall_descriptor_;
}

const EventCall& EventCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

EventCall* EventCall::default_instance_ = NULL;

EventCall* EventCall::New() const {
  return new EventCall;
}

void EventCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hasreturn_ = false;
    serviceindex_ = 0u;
    methodindex_ = 0u;
  }
  arguments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool hasReturn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasreturn_)));
          set_has_hasreturn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serviceIndex;
        break;
      }
      
      // required uint32 serviceIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serviceIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceindex_)));
          set_has_serviceindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_methodIndex;
        break;
      }
      
      // required uint32 methodIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_methodIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &methodindex_)));
          set_has_methodindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_arguments;
        break;
      }
      
      // repeated .reef.DataArgument arguments = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_arguments;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool hasReturn = 1;
  if (has_hasreturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hasreturn(), output);
  }
  
  // required uint32 serviceIndex = 2;
  if (has_serviceindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serviceindex(), output);
  }
  
  // required uint32 methodIndex = 3;
  if (has_methodindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->methodindex(), output);
  }
  
  // repeated .reef.DataArgument arguments = 4;
  for (int i = 0; i < this->arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arguments(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool hasReturn = 1;
  if (has_hasreturn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hasreturn(), target);
  }
  
  // required uint32 serviceIndex = 2;
  if (has_serviceindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serviceindex(), target);
  }
  
  // required uint32 methodIndex = 3;
  if (has_methodindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->methodindex(), target);
  }
  
  // repeated .reef.DataArgument arguments = 4;
  for (int i = 0; i < this->arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arguments(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventCall::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool hasReturn = 1;
    if (has_hasreturn()) {
      total_size += 1 + 1;
    }
    
    // required uint32 serviceIndex = 2;
    if (has_serviceindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serviceindex());
    }
    
    // required uint32 methodIndex = 3;
    if (has_methodindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->methodindex());
    }
    
  }
  // repeated .reef.DataArgument arguments = 4;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventCall::MergeFrom(const EventCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  arguments_.MergeFrom(from.arguments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasreturn()) {
      set_hasreturn(from.hasreturn());
    }
    if (from.has_serviceindex()) {
      set_serviceindex(from.serviceindex());
    }
    if (from.has_methodindex()) {
      set_methodindex(from.methodindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventCall::CopyFrom(const EventCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < arguments_size(); i++) {
    if (!this->arguments(i).IsInitialized()) return false;
  }
  return true;
}

void EventCall::Swap(EventCall* other) {
  if (other != this) {
    std::swap(hasreturn_, other->hasreturn_);
    std::swap(serviceindex_, other->serviceindex_);
    std::swap(methodindex_, other->methodindex_);
    arguments_.Swap(&other->arguments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventCall_descriptor_;
  metadata.reflection = EventCall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventField::kIsSetFieldFieldNumber;
const int EventField::kServiceIndexFieldNumber;
const int EventField::kFieldIndexFieldNumber;
const int EventField::kValueFieldNumber;
#endif  // !_MSC_VER

EventField::EventField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventField::InitAsDefaultInstance() {
  value_ = const_cast< ::reef::DataArgument*>(&::reef::DataArgument::default_instance());
}

EventField::EventField(const EventField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventField::SharedCtor() {
  _cached_size_ = 0;
  issetfield_ = false;
  serviceindex_ = 0u;
  fieldindex_ = 0u;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventField::~EventField() {
  SharedDtor();
}

void EventField::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void EventField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventField_descriptor_;
}

const EventField& EventField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

EventField* EventField::default_instance_ = NULL;

EventField* EventField::New() const {
  return new EventField;
}

void EventField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issetfield_ = false;
    serviceindex_ = 0u;
    fieldindex_ = 0u;
    if (has_value()) {
      if (value_ != NULL) value_->::reef::DataArgument::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isSetField = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issetfield_)));
          set_has_issetfield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serviceIndex;
        break;
      }
      
      // required uint32 serviceIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serviceIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceindex_)));
          set_has_serviceindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fieldIndex;
        break;
      }
      
      // required uint32 fieldIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fieldindex_)));
          set_has_fieldindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }
      
      // required .reef.DataArgument value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isSetField = 1;
  if (has_issetfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issetfield(), output);
  }
  
  // required uint32 serviceIndex = 2;
  if (has_serviceindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serviceindex(), output);
  }
  
  // required uint32 fieldIndex = 3;
  if (has_fieldindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fieldindex(), output);
  }
  
  // required .reef.DataArgument value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isSetField = 1;
  if (has_issetfield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issetfield(), target);
  }
  
  // required uint32 serviceIndex = 2;
  if (has_serviceindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serviceindex(), target);
  }
  
  // required uint32 fieldIndex = 3;
  if (has_fieldindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fieldindex(), target);
  }
  
  // required .reef.DataArgument value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isSetField = 1;
    if (has_issetfield()) {
      total_size += 1 + 1;
    }
    
    // required uint32 serviceIndex = 2;
    if (has_serviceindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serviceindex());
    }
    
    // required uint32 fieldIndex = 3;
    if (has_fieldindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fieldindex());
    }
    
    // required .reef.DataArgument value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventField::MergeFrom(const EventField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issetfield()) {
      set_issetfield(from.issetfield());
    }
    if (from.has_serviceindex()) {
      set_serviceindex(from.serviceindex());
    }
    if (from.has_fieldindex()) {
      set_fieldindex(from.fieldindex());
    }
    if (from.has_value()) {
      mutable_value()->::reef::DataArgument::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventField::CopyFrom(const EventField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventField::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void EventField::Swap(EventField* other) {
  if (other != this) {
    std::swap(issetfield_, other->issetfield_);
    std::swap(serviceindex_, other->serviceindex_);
    std::swap(fieldindex_, other->fieldindex_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventField_descriptor_;
  metadata.reflection = EventField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventReturn::kArgumentsFieldNumber;
#endif  // !_MSC_VER

EventReturn::EventReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventReturn::InitAsDefaultInstance() {
}

EventReturn::EventReturn(const EventReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventReturn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventReturn::~EventReturn() {
  SharedDtor();
}

void EventReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventReturn_descriptor_;
}

const EventReturn& EventReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

EventReturn* EventReturn::default_instance_ = NULL;

EventReturn* EventReturn::New() const {
  return new EventReturn;
}

void EventReturn::Clear() {
  arguments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .reef.DataArgument arguments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_arguments;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .reef.DataArgument arguments = 1;
  for (int i = 0; i < this->arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arguments(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .reef.DataArgument arguments = 1;
  for (int i = 0; i < this->arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arguments(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventReturn::ByteSize() const {
  int total_size = 0;
  
  // repeated .reef.DataArgument arguments = 1;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventReturn::MergeFrom(const EventReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  arguments_.MergeFrom(from.arguments_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventReturn::CopyFrom(const EventReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventReturn::IsInitialized() const {
  
  for (int i = 0; i < arguments_size(); i++) {
    if (!this->arguments(i).IsInitialized()) return false;
  }
  return true;
}

void EventReturn::Swap(EventReturn* other) {
  if (other != this) {
    arguments_.Swap(&other->arguments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventReturn_descriptor_;
  metadata.reflection = EventReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventCreate::kComponentTypeNameFieldNumber;
#endif  // !_MSC_VER

EventCreate::EventCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventCreate::InitAsDefaultInstance() {
}

EventCreate::EventCreate(const EventCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventCreate::SharedCtor() {
  _cached_size_ = 0;
  componenttypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventCreate::~EventCreate() {
  SharedDtor();
}

void EventCreate::SharedDtor() {
  if (componenttypename_ != &::google::protobuf::internal::kEmptyString) {
    delete componenttypename_;
  }
  if (this != default_instance_) {
  }
}

void EventCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventCreate_descriptor_;
}

const EventCreate& EventCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

EventCreate* EventCreate::default_instance_ = NULL;

EventCreate* EventCreate::New() const {
  return new EventCreate;
}

void EventCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_componenttypename()) {
      if (componenttypename_ != &::google::protobuf::internal::kEmptyString) {
        componenttypename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string componentTypeName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componenttypename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->componenttypename().data(), this->componenttypename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string componentTypeName = 1;
  if (has_componenttypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componenttypename().data(), this->componenttypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->componenttypename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string componentTypeName = 1;
  if (has_componenttypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componenttypename().data(), this->componenttypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->componenttypename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventCreate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string componentTypeName = 1;
    if (has_componenttypename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componenttypename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventCreate::MergeFrom(const EventCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componenttypename()) {
      set_componenttypename(from.componenttypename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventCreate::CopyFrom(const EventCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventCreate::Swap(EventCreate* other) {
  if (other != this) {
    std::swap(componenttypename_, other->componenttypename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventCreate_descriptor_;
  metadata.reflection = EventCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResultCreate::kVirtualAddressFieldNumber;
#endif  // !_MSC_VER

ResultCreate::ResultCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultCreate::InitAsDefaultInstance() {
}

ResultCreate::ResultCreate(const ResultCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultCreate::SharedCtor() {
  _cached_size_ = 0;
  virtualaddress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultCreate::~ResultCreate() {
  SharedDtor();
}

void ResultCreate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultCreate_descriptor_;
}

const ResultCreate& ResultCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

ResultCreate* ResultCreate::default_instance_ = NULL;

ResultCreate* ResultCreate::New() const {
  return new ResultCreate;
}

void ResultCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    virtualaddress_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 virtualAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &virtualaddress_)));
          set_has_virtualaddress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 virtualAddress = 1;
  if (has_virtualaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->virtualaddress(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 virtualAddress = 1;
  if (has_virtualaddress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->virtualaddress(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultCreate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 virtualAddress = 1;
    if (has_virtualaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->virtualaddress());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultCreate::MergeFrom(const ResultCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_virtualaddress()) {
      set_virtualaddress(from.virtualaddress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultCreate::CopyFrom(const ResultCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResultCreate::Swap(ResultCreate* other) {
  if (other != this) {
    std::swap(virtualaddress_, other->virtualaddress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultCreate_descriptor_;
  metadata.reflection = ResultCreate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Event_EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_EventType_descriptor_;
}
bool Event_EventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Event_EventType Event::TYPE_CREATE;
const Event_EventType Event::TYPE_CREATE_RESULT;
const Event_EventType Event::TYPE_CALL;
const Event_EventType Event::TYPE_CALL_RETURN;
const Event_EventType Event::TYPE_FIELD;
const Event_EventType Event::EventType_MIN;
const Event_EventType Event::EventType_MAX;
const int Event::EventType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Event::kEventTypeFieldNumber;
const int Event::kDestinationFieldNumber;
const int Event::kEventCreateFieldNumber;
const int Event::kResultCreateFieldNumber;
const int Event::kEventCallFieldNumber;
const int Event::kEventReturnFieldNumber;
const int Event::kEventFieldFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
  eventcreate_ = const_cast< ::reef::EventCreate*>(&::reef::EventCreate::default_instance());
  resultcreate_ = const_cast< ::reef::ResultCreate*>(&::reef::ResultCreate::default_instance());
  eventcall_ = const_cast< ::reef::EventCall*>(&::reef::EventCall::default_instance());
  eventreturn_ = const_cast< ::reef::EventReturn*>(&::reef::EventReturn::default_instance());
  eventfield_ = const_cast< ::reef::EventField*>(&::reef::EventField::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  eventtype_ = 0u;
  destination_ = 0u;
  eventcreate_ = NULL;
  resultcreate_ = NULL;
  eventcall_ = NULL;
  eventreturn_ = NULL;
  eventfield_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
    delete eventcreate_;
    delete resultcreate_;
    delete eventcall_;
    delete eventreturn_;
    delete eventfield_;
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventtype_ = 0u;
    destination_ = 0u;
    if (has_eventcreate()) {
      if (eventcreate_ != NULL) eventcreate_->::reef::EventCreate::Clear();
    }
    if (has_resultcreate()) {
      if (resultcreate_ != NULL) resultcreate_->::reef::ResultCreate::Clear();
    }
    if (has_eventcall()) {
      if (eventcall_ != NULL) eventcall_->::reef::EventCall::Clear();
    }
    if (has_eventreturn()) {
      if (eventreturn_ != NULL) eventreturn_->::reef::EventReturn::Clear();
    }
    if (has_eventfield()) {
      if (eventfield_ != NULL) eventfield_->::reef::EventField::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eventType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventtype_)));
          set_has_eventtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_destination;
        break;
      }
      
      // required uint32 destination = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destination:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destination_)));
          set_has_destination();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_eventCreate;
        break;
      }
      
      // optional .reef.EventCreate eventCreate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventCreate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventcreate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resultCreate;
        break;
      }
      
      // optional .reef.ResultCreate resultCreate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resultCreate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resultcreate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_eventCall;
        break;
      }
      
      // optional .reef.EventCall eventCall = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventCall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventcall()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_eventReturn;
        break;
      }
      
      // optional .reef.EventReturn eventReturn = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventReturn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventreturn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_eventField;
        break;
      }
      
      // optional .reef.EventField eventField = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventField:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventfield()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 eventType = 1;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventtype(), output);
  }
  
  // required uint32 destination = 2;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->destination(), output);
  }
  
  // optional .reef.EventCreate eventCreate = 3;
  if (has_eventcreate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->eventcreate(), output);
  }
  
  // optional .reef.ResultCreate resultCreate = 4;
  if (has_resultcreate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->resultcreate(), output);
  }
  
  // optional .reef.EventCall eventCall = 5;
  if (has_eventcall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->eventcall(), output);
  }
  
  // optional .reef.EventReturn eventReturn = 6;
  if (has_eventreturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->eventreturn(), output);
  }
  
  // optional .reef.EventField eventField = 7;
  if (has_eventfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->eventfield(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 eventType = 1;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventtype(), target);
  }
  
  // required uint32 destination = 2;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->destination(), target);
  }
  
  // optional .reef.EventCreate eventCreate = 3;
  if (has_eventcreate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->eventcreate(), target);
  }
  
  // optional .reef.ResultCreate resultCreate = 4;
  if (has_resultcreate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->resultcreate(), target);
  }
  
  // optional .reef.EventCall eventCall = 5;
  if (has_eventcall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->eventcall(), target);
  }
  
  // optional .reef.EventReturn eventReturn = 6;
  if (has_eventreturn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->eventreturn(), target);
  }
  
  // optional .reef.EventField eventField = 7;
  if (has_eventfield()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->eventfield(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eventType = 1;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventtype());
    }
    
    // required uint32 destination = 2;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destination());
    }
    
    // optional .reef.EventCreate eventCreate = 3;
    if (has_eventcreate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventcreate());
    }
    
    // optional .reef.ResultCreate resultCreate = 4;
    if (has_resultcreate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resultcreate());
    }
    
    // optional .reef.EventCall eventCall = 5;
    if (has_eventcall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventcall());
    }
    
    // optional .reef.EventReturn eventReturn = 6;
    if (has_eventreturn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventreturn());
    }
    
    // optional .reef.EventField eventField = 7;
    if (has_eventfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventfield());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_destination()) {
      set_destination(from.destination());
    }
    if (from.has_eventcreate()) {
      mutable_eventcreate()->::reef::EventCreate::MergeFrom(from.eventcreate());
    }
    if (from.has_resultcreate()) {
      mutable_resultcreate()->::reef::ResultCreate::MergeFrom(from.resultcreate());
    }
    if (from.has_eventcall()) {
      mutable_eventcall()->::reef::EventCall::MergeFrom(from.eventcall());
    }
    if (from.has_eventreturn()) {
      mutable_eventreturn()->::reef::EventReturn::MergeFrom(from.eventreturn());
    }
    if (from.has_eventfield()) {
      mutable_eventfield()->::reef::EventField::MergeFrom(from.eventfield());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_eventcreate()) {
    if (!this->eventcreate().IsInitialized()) return false;
  }
  if (has_resultcreate()) {
    if (!this->resultcreate().IsInitialized()) return false;
  }
  if (has_eventcall()) {
    if (!this->eventcall().IsInitialized()) return false;
  }
  if (has_eventreturn()) {
    if (!this->eventreturn().IsInitialized()) return false;
  }
  if (has_eventfield()) {
    if (!this->eventfield().IsInitialized()) return false;
  }
  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(eventtype_, other->eventtype_);
    std::swap(destination_, other->destination_);
    std::swap(eventcreate_, other->eventcreate_);
    std::swap(resultcreate_, other->resultcreate_);
    std::swap(eventcall_, other->eventcall_);
    std::swap(eventreturn_, other->eventreturn_);
    std::swap(eventfield_, other->eventfield_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace reef

// @@protoc_insertion_point(global_scope)
