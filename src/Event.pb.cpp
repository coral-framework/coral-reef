// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DataArgument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataArgument_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Event_EventType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Event_2eproto() {
  protobuf_AddDesc_Event_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Event.proto");
  GOOGLE_CHECK(file != NULL);
  DataArgument_descriptor_ = file->message_type(0);
  static const int DataArgument_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataArgument, dummy_),
  };
  DataArgument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataArgument_descriptor_,
      DataArgument::default_instance_,
      DataArgument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataArgument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataArgument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataArgument));
  CallEvent_descriptor_ = file->message_type(1);
  static const int CallEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallEvent, hasreturn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallEvent, serviceindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallEvent, methodindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallEvent, arguments_),
  };
  CallEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CallEvent_descriptor_,
      CallEvent::default_instance_,
      CallEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CallEvent));
  FieldEvent_descriptor_ = file->message_type(2);
  static const int FieldEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEvent, issetfield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEvent, serviceindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEvent, fieldindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEvent, value_),
  };
  FieldEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FieldEvent_descriptor_,
      FieldEvent::default_instance_,
      FieldEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FieldEvent));
  ReturnEvent_descriptor_ = file->message_type(3);
  static const int ReturnEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnEvent, arguments_),
  };
  ReturnEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnEvent_descriptor_,
      ReturnEvent::default_instance_,
      ReturnEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnEvent));
  CreateEvent_descriptor_ = file->message_type(4);
  static const int CreateEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEvent, componenttypename_),
  };
  CreateEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateEvent_descriptor_,
      CreateEvent::default_instance_,
      CreateEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateEvent));
  CreateResult_descriptor_ = file->message_type(5);
  static const int CreateResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateResult, virtualaddress_),
  };
  CreateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateResult_descriptor_,
      CreateResult::default_instance_,
      CreateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateResult));
  Event_descriptor_ = file->message_type(6);
  static const int Event_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, createevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, createresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, callevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, callreturn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, fieldevent_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  Event_EventType_descriptor_ = Event_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Event_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataArgument_descriptor_, &DataArgument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CallEvent_descriptor_, &CallEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldEvent_descriptor_, &FieldEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnEvent_descriptor_, &ReturnEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateEvent_descriptor_, &CreateEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateResult_descriptor_, &CreateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Event_2eproto() {
  delete DataArgument::default_instance_;
  delete DataArgument_reflection_;
  delete CallEvent::default_instance_;
  delete CallEvent_reflection_;
  delete FieldEvent::default_instance_;
  delete FieldEvent_reflection_;
  delete ReturnEvent::default_instance_;
  delete ReturnEvent_reflection_;
  delete CreateEvent::default_instance_;
  delete CreateEvent_reflection_;
  delete CreateResult::default_instance_;
  delete CreateResult_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
}

void protobuf_AddDesc_Event_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Event.proto\"\035\n\014DataArgument\022\r\n\005dummy\030\001"
    " \002(\005\"k\n\tCallEvent\022\021\n\thasReturn\030\001 \002(\010\022\024\n\014"
    "serviceIndex\030\002 \002(\r\022\023\n\013methodIndex\030\003 \002(\r\022"
    " \n\targuments\030\004 \003(\0132\r.DataArgument\"h\n\nFie"
    "ldEvent\022\022\n\nisSetField\030\001 \002(\010\022\024\n\014serviceIn"
    "dex\030\002 \002(\r\022\022\n\nfieldIndex\030\003 \002(\r\022\034\n\005value\030\004"
    " \002(\0132\r.DataArgument\"/\n\013ReturnEvent\022 \n\tar"
    "guments\030\001 \003(\0132\r.DataArgument\"(\n\013CreateEv"
    "ent\022\031\n\021componentTypeName\030\001 \002(\t\"&\n\014Create"
    "Result\022\026\n\016virtualAddress\030\001 \002(\005\"\304\002\n\005Event"
    "\022\021\n\teventType\030\001 \002(\r\022\023\n\013destination\030\002 \002(\r"
    "\022!\n\013createEvent\030\003 \001(\0132\014.CreateEvent\022#\n\014c"
    "reateResult\030\004 \001(\0132\r.CreateResult\022\035\n\tcall"
    "Event\030\005 \001(\0132\n.CallEvent\022 \n\ncallReturn\030\006 "
    "\001(\0132\014.ReturnEvent\022\037\n\nfieldEvent\030\007 \001(\0132\013."
    "FieldEvent\"i\n\tEventType\022\017\n\013TYPE_CREATE\020\000"
    "\022\026\n\022TYPE_CREATE_RESULT\020\001\022\r\n\tTYPE_CALL\020\002\022"
    "\024\n\020TYPE_CALL_RETURN\020\003\022\016\n\nTYPE_FIELD\020\004", 717);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Event.proto", &protobuf_RegisterTypes);
  DataArgument::default_instance_ = new DataArgument();
  CallEvent::default_instance_ = new CallEvent();
  FieldEvent::default_instance_ = new FieldEvent();
  ReturnEvent::default_instance_ = new ReturnEvent();
  CreateEvent::default_instance_ = new CreateEvent();
  CreateResult::default_instance_ = new CreateResult();
  Event::default_instance_ = new Event();
  DataArgument::default_instance_->InitAsDefaultInstance();
  CallEvent::default_instance_->InitAsDefaultInstance();
  FieldEvent::default_instance_->InitAsDefaultInstance();
  ReturnEvent::default_instance_->InitAsDefaultInstance();
  CreateEvent::default_instance_->InitAsDefaultInstance();
  CreateResult::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Event_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Event_2eproto {
  StaticDescriptorInitializer_Event_2eproto() {
    protobuf_AddDesc_Event_2eproto();
  }
} static_descriptor_initializer_Event_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DataArgument::kDummyFieldNumber;
#endif  // !_MSC_VER

DataArgument::DataArgument()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataArgument::InitAsDefaultInstance() {
}

DataArgument::DataArgument(const DataArgument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataArgument::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataArgument::~DataArgument() {
  SharedDtor();
}

void DataArgument::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataArgument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataArgument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataArgument_descriptor_;
}

const DataArgument& DataArgument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

DataArgument* DataArgument::default_instance_ = NULL;

DataArgument* DataArgument::New() const {
  return new DataArgument;
}

void DataArgument::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataArgument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataArgument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataArgument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataArgument::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataArgument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataArgument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataArgument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataArgument::MergeFrom(const DataArgument& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataArgument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataArgument::CopyFrom(const DataArgument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataArgument::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DataArgument::Swap(DataArgument* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataArgument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataArgument_descriptor_;
  metadata.reflection = DataArgument_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CallEvent::kHasReturnFieldNumber;
const int CallEvent::kServiceIndexFieldNumber;
const int CallEvent::kMethodIndexFieldNumber;
const int CallEvent::kArgumentsFieldNumber;
#endif  // !_MSC_VER

CallEvent::CallEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CallEvent::InitAsDefaultInstance() {
}

CallEvent::CallEvent(const CallEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CallEvent::SharedCtor() {
  _cached_size_ = 0;
  hasreturn_ = false;
  serviceindex_ = 0u;
  methodindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallEvent::~CallEvent() {
  SharedDtor();
}

void CallEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CallEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallEvent_descriptor_;
}

const CallEvent& CallEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

CallEvent* CallEvent::default_instance_ = NULL;

CallEvent* CallEvent::New() const {
  return new CallEvent;
}

void CallEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hasreturn_ = false;
    serviceindex_ = 0u;
    methodindex_ = 0u;
  }
  arguments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CallEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool hasReturn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasreturn_)));
          set_has_hasreturn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serviceIndex;
        break;
      }
      
      // required uint32 serviceIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serviceIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceindex_)));
          set_has_serviceindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_methodIndex;
        break;
      }
      
      // required uint32 methodIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_methodIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &methodindex_)));
          set_has_methodindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_arguments;
        break;
      }
      
      // repeated .DataArgument arguments = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_arguments;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CallEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool hasReturn = 1;
  if (has_hasreturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hasreturn(), output);
  }
  
  // required uint32 serviceIndex = 2;
  if (has_serviceindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serviceindex(), output);
  }
  
  // required uint32 methodIndex = 3;
  if (has_methodindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->methodindex(), output);
  }
  
  // repeated .DataArgument arguments = 4;
  for (int i = 0; i < this->arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arguments(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CallEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool hasReturn = 1;
  if (has_hasreturn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hasreturn(), target);
  }
  
  // required uint32 serviceIndex = 2;
  if (has_serviceindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serviceindex(), target);
  }
  
  // required uint32 methodIndex = 3;
  if (has_methodindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->methodindex(), target);
  }
  
  // repeated .DataArgument arguments = 4;
  for (int i = 0; i < this->arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arguments(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CallEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool hasReturn = 1;
    if (has_hasreturn()) {
      total_size += 1 + 1;
    }
    
    // required uint32 serviceIndex = 2;
    if (has_serviceindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serviceindex());
    }
    
    // required uint32 methodIndex = 3;
    if (has_methodindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->methodindex());
    }
    
  }
  // repeated .DataArgument arguments = 4;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CallEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallEvent::MergeFrom(const CallEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  arguments_.MergeFrom(from.arguments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasreturn()) {
      set_hasreturn(from.hasreturn());
    }
    if (from.has_serviceindex()) {
      set_serviceindex(from.serviceindex());
    }
    if (from.has_methodindex()) {
      set_methodindex(from.methodindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CallEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallEvent::CopyFrom(const CallEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < arguments_size(); i++) {
    if (!this->arguments(i).IsInitialized()) return false;
  }
  return true;
}

void CallEvent::Swap(CallEvent* other) {
  if (other != this) {
    std::swap(hasreturn_, other->hasreturn_);
    std::swap(serviceindex_, other->serviceindex_);
    std::swap(methodindex_, other->methodindex_);
    arguments_.Swap(&other->arguments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CallEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallEvent_descriptor_;
  metadata.reflection = CallEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FieldEvent::kIsSetFieldFieldNumber;
const int FieldEvent::kServiceIndexFieldNumber;
const int FieldEvent::kFieldIndexFieldNumber;
const int FieldEvent::kValueFieldNumber;
#endif  // !_MSC_VER

FieldEvent::FieldEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FieldEvent::InitAsDefaultInstance() {
  value_ = const_cast< ::DataArgument*>(&::DataArgument::default_instance());
}

FieldEvent::FieldEvent(const FieldEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FieldEvent::SharedCtor() {
  _cached_size_ = 0;
  issetfield_ = false;
  serviceindex_ = 0u;
  fieldindex_ = 0u;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldEvent::~FieldEvent() {
  SharedDtor();
}

void FieldEvent::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void FieldEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldEvent_descriptor_;
}

const FieldEvent& FieldEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

FieldEvent* FieldEvent::default_instance_ = NULL;

FieldEvent* FieldEvent::New() const {
  return new FieldEvent;
}

void FieldEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issetfield_ = false;
    serviceindex_ = 0u;
    fieldindex_ = 0u;
    if (has_value()) {
      if (value_ != NULL) value_->::DataArgument::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isSetField = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issetfield_)));
          set_has_issetfield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serviceIndex;
        break;
      }
      
      // required uint32 serviceIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serviceIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceindex_)));
          set_has_serviceindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fieldIndex;
        break;
      }
      
      // required uint32 fieldIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fieldindex_)));
          set_has_fieldindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }
      
      // required .DataArgument value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FieldEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isSetField = 1;
  if (has_issetfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issetfield(), output);
  }
  
  // required uint32 serviceIndex = 2;
  if (has_serviceindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serviceindex(), output);
  }
  
  // required uint32 fieldIndex = 3;
  if (has_fieldindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fieldindex(), output);
  }
  
  // required .DataArgument value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FieldEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isSetField = 1;
  if (has_issetfield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issetfield(), target);
  }
  
  // required uint32 serviceIndex = 2;
  if (has_serviceindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serviceindex(), target);
  }
  
  // required uint32 fieldIndex = 3;
  if (has_fieldindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fieldindex(), target);
  }
  
  // required .DataArgument value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FieldEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isSetField = 1;
    if (has_issetfield()) {
      total_size += 1 + 1;
    }
    
    // required uint32 serviceIndex = 2;
    if (has_serviceindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serviceindex());
    }
    
    // required uint32 fieldIndex = 3;
    if (has_fieldindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fieldindex());
    }
    
    // required .DataArgument value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldEvent::MergeFrom(const FieldEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issetfield()) {
      set_issetfield(from.issetfield());
    }
    if (from.has_serviceindex()) {
      set_serviceindex(from.serviceindex());
    }
    if (from.has_fieldindex()) {
      set_fieldindex(from.fieldindex());
    }
    if (from.has_value()) {
      mutable_value()->::DataArgument::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldEvent::CopyFrom(const FieldEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void FieldEvent::Swap(FieldEvent* other) {
  if (other != this) {
    std::swap(issetfield_, other->issetfield_);
    std::swap(serviceindex_, other->serviceindex_);
    std::swap(fieldindex_, other->fieldindex_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FieldEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldEvent_descriptor_;
  metadata.reflection = FieldEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnEvent::kArgumentsFieldNumber;
#endif  // !_MSC_VER

ReturnEvent::ReturnEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnEvent::InitAsDefaultInstance() {
}

ReturnEvent::ReturnEvent(const ReturnEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnEvent::~ReturnEvent() {
  SharedDtor();
}

void ReturnEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnEvent_descriptor_;
}

const ReturnEvent& ReturnEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

ReturnEvent* ReturnEvent::default_instance_ = NULL;

ReturnEvent* ReturnEvent::New() const {
  return new ReturnEvent;
}

void ReturnEvent::Clear() {
  arguments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DataArgument arguments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_arguments;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DataArgument arguments = 1;
  for (int i = 0; i < this->arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arguments(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DataArgument arguments = 1;
  for (int i = 0; i < this->arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arguments(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnEvent::ByteSize() const {
  int total_size = 0;
  
  // repeated .DataArgument arguments = 1;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnEvent::MergeFrom(const ReturnEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  arguments_.MergeFrom(from.arguments_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnEvent::CopyFrom(const ReturnEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnEvent::IsInitialized() const {
  
  for (int i = 0; i < arguments_size(); i++) {
    if (!this->arguments(i).IsInitialized()) return false;
  }
  return true;
}

void ReturnEvent::Swap(ReturnEvent* other) {
  if (other != this) {
    arguments_.Swap(&other->arguments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnEvent_descriptor_;
  metadata.reflection = ReturnEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateEvent::kComponentTypeNameFieldNumber;
#endif  // !_MSC_VER

CreateEvent::CreateEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateEvent::InitAsDefaultInstance() {
}

CreateEvent::CreateEvent(const CreateEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateEvent::SharedCtor() {
  _cached_size_ = 0;
  componenttypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateEvent::~CreateEvent() {
  SharedDtor();
}

void CreateEvent::SharedDtor() {
  if (componenttypename_ != &::google::protobuf::internal::kEmptyString) {
    delete componenttypename_;
  }
  if (this != default_instance_) {
  }
}

void CreateEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateEvent_descriptor_;
}

const CreateEvent& CreateEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

CreateEvent* CreateEvent::default_instance_ = NULL;

CreateEvent* CreateEvent::New() const {
  return new CreateEvent;
}

void CreateEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_componenttypename()) {
      if (componenttypename_ != &::google::protobuf::internal::kEmptyString) {
        componenttypename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string componentTypeName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componenttypename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->componenttypename().data(), this->componenttypename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string componentTypeName = 1;
  if (has_componenttypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componenttypename().data(), this->componenttypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->componenttypename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string componentTypeName = 1;
  if (has_componenttypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componenttypename().data(), this->componenttypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->componenttypename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string componentTypeName = 1;
    if (has_componenttypename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componenttypename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateEvent::MergeFrom(const CreateEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componenttypename()) {
      set_componenttypename(from.componenttypename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateEvent::CopyFrom(const CreateEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CreateEvent::Swap(CreateEvent* other) {
  if (other != this) {
    std::swap(componenttypename_, other->componenttypename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateEvent_descriptor_;
  metadata.reflection = CreateEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateResult::kVirtualAddressFieldNumber;
#endif  // !_MSC_VER

CreateResult::CreateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateResult::InitAsDefaultInstance() {
}

CreateResult::CreateResult(const CreateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateResult::SharedCtor() {
  _cached_size_ = 0;
  virtualaddress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateResult::~CreateResult() {
  SharedDtor();
}

void CreateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateResult_descriptor_;
}

const CreateResult& CreateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

CreateResult* CreateResult::default_instance_ = NULL;

CreateResult* CreateResult::New() const {
  return new CreateResult;
}

void CreateResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    virtualaddress_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 virtualAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &virtualaddress_)));
          set_has_virtualaddress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 virtualAddress = 1;
  if (has_virtualaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->virtualaddress(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 virtualAddress = 1;
  if (has_virtualaddress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->virtualaddress(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 virtualAddress = 1;
    if (has_virtualaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->virtualaddress());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateResult::MergeFrom(const CreateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_virtualaddress()) {
      set_virtualaddress(from.virtualaddress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateResult::CopyFrom(const CreateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CreateResult::Swap(CreateResult* other) {
  if (other != this) {
    std::swap(virtualaddress_, other->virtualaddress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateResult_descriptor_;
  metadata.reflection = CreateResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Event_EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_EventType_descriptor_;
}
bool Event_EventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Event_EventType Event::TYPE_CREATE;
const Event_EventType Event::TYPE_CREATE_RESULT;
const Event_EventType Event::TYPE_CALL;
const Event_EventType Event::TYPE_CALL_RETURN;
const Event_EventType Event::TYPE_FIELD;
const Event_EventType Event::EventType_MIN;
const Event_EventType Event::EventType_MAX;
const int Event::EventType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Event::kEventTypeFieldNumber;
const int Event::kDestinationFieldNumber;
const int Event::kCreateEventFieldNumber;
const int Event::kCreateResultFieldNumber;
const int Event::kCallEventFieldNumber;
const int Event::kCallReturnFieldNumber;
const int Event::kFieldEventFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
  createevent_ = const_cast< ::CreateEvent*>(&::CreateEvent::default_instance());
  createresult_ = const_cast< ::CreateResult*>(&::CreateResult::default_instance());
  callevent_ = const_cast< ::CallEvent*>(&::CallEvent::default_instance());
  callreturn_ = const_cast< ::ReturnEvent*>(&::ReturnEvent::default_instance());
  fieldevent_ = const_cast< ::FieldEvent*>(&::FieldEvent::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  eventtype_ = 0u;
  destination_ = 0u;
  createevent_ = NULL;
  createresult_ = NULL;
  callevent_ = NULL;
  callreturn_ = NULL;
  fieldevent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
    delete createevent_;
    delete createresult_;
    delete callevent_;
    delete callreturn_;
    delete fieldevent_;
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventtype_ = 0u;
    destination_ = 0u;
    if (has_createevent()) {
      if (createevent_ != NULL) createevent_->::CreateEvent::Clear();
    }
    if (has_createresult()) {
      if (createresult_ != NULL) createresult_->::CreateResult::Clear();
    }
    if (has_callevent()) {
      if (callevent_ != NULL) callevent_->::CallEvent::Clear();
    }
    if (has_callreturn()) {
      if (callreturn_ != NULL) callreturn_->::ReturnEvent::Clear();
    }
    if (has_fieldevent()) {
      if (fieldevent_ != NULL) fieldevent_->::FieldEvent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eventType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventtype_)));
          set_has_eventtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_destination;
        break;
      }
      
      // required uint32 destination = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destination:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destination_)));
          set_has_destination();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_createEvent;
        break;
      }
      
      // optional .CreateEvent createEvent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_createResult;
        break;
      }
      
      // optional .CreateResult createResult = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createresult()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_callEvent;
        break;
      }
      
      // optional .CallEvent callEvent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_callevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_callReturn;
        break;
      }
      
      // optional .ReturnEvent callReturn = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callReturn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_callreturn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldEvent;
        break;
      }
      
      // optional .FieldEvent fieldEvent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fieldevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 eventType = 1;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventtype(), output);
  }
  
  // required uint32 destination = 2;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->destination(), output);
  }
  
  // optional .CreateEvent createEvent = 3;
  if (has_createevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->createevent(), output);
  }
  
  // optional .CreateResult createResult = 4;
  if (has_createresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->createresult(), output);
  }
  
  // optional .CallEvent callEvent = 5;
  if (has_callevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->callevent(), output);
  }
  
  // optional .ReturnEvent callReturn = 6;
  if (has_callreturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->callreturn(), output);
  }
  
  // optional .FieldEvent fieldEvent = 7;
  if (has_fieldevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fieldevent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 eventType = 1;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventtype(), target);
  }
  
  // required uint32 destination = 2;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->destination(), target);
  }
  
  // optional .CreateEvent createEvent = 3;
  if (has_createevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->createevent(), target);
  }
  
  // optional .CreateResult createResult = 4;
  if (has_createresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->createresult(), target);
  }
  
  // optional .CallEvent callEvent = 5;
  if (has_callevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->callevent(), target);
  }
  
  // optional .ReturnEvent callReturn = 6;
  if (has_callreturn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->callreturn(), target);
  }
  
  // optional .FieldEvent fieldEvent = 7;
  if (has_fieldevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fieldevent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eventType = 1;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventtype());
    }
    
    // required uint32 destination = 2;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destination());
    }
    
    // optional .CreateEvent createEvent = 3;
    if (has_createevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->createevent());
    }
    
    // optional .CreateResult createResult = 4;
    if (has_createresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->createresult());
    }
    
    // optional .CallEvent callEvent = 5;
    if (has_callevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->callevent());
    }
    
    // optional .ReturnEvent callReturn = 6;
    if (has_callreturn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->callreturn());
    }
    
    // optional .FieldEvent fieldEvent = 7;
    if (has_fieldevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fieldevent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_destination()) {
      set_destination(from.destination());
    }
    if (from.has_createevent()) {
      mutable_createevent()->::CreateEvent::MergeFrom(from.createevent());
    }
    if (from.has_createresult()) {
      mutable_createresult()->::CreateResult::MergeFrom(from.createresult());
    }
    if (from.has_callevent()) {
      mutable_callevent()->::CallEvent::MergeFrom(from.callevent());
    }
    if (from.has_callreturn()) {
      mutable_callreturn()->::ReturnEvent::MergeFrom(from.callreturn());
    }
    if (from.has_fieldevent()) {
      mutable_fieldevent()->::FieldEvent::MergeFrom(from.fieldevent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_createevent()) {
    if (!this->createevent().IsInitialized()) return false;
  }
  if (has_createresult()) {
    if (!this->createresult().IsInitialized()) return false;
  }
  if (has_callevent()) {
    if (!this->callevent().IsInitialized()) return false;
  }
  if (has_callreturn()) {
    if (!this->callreturn().IsInitialized()) return false;
  }
  if (has_fieldevent()) {
    if (!this->fieldevent().IsInitialized()) return false;
  }
  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(eventtype_, other->eventtype_);
    std::swap(destination_, other->destination_);
    std::swap(createevent_, other->createevent_);
    std::swap(createresult_, other->createresult_);
    std::swap(callevent_, other->callevent_);
    std::swap(callreturn_, other->callreturn_);
    std::swap(fieldevent_, other->fieldevent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
