/*
 * Component implementation template for 'testModule.TestComponent'.
 * WARNING: remember to copy this file to your project dir before you begin to change it.
 * Generated by the Coral Compiler v0.7.0 on Thu Mar 01 15:35:26 2012.p
 */

#include "TestComponent_Base.h"
#include <testModule/MotherStruct.h>

namespace testModule {

class TestComponent : public TestComponent_Base
{
public:
	TestComponent()
	{
		// empty constructor
	}

	virtual ~TestComponent()
	{
		// empty destructor
	}

	// ------ testModule.IComplexTypes Methods ------ //

	const testModule::StringNativeClass& getStringNativeClass()
	{
		return _stringNativeClass;
	}

	void setStringNativeClass( const testModule::StringNativeClass& stringNativeClass )
	{
		_stringNativeClass = stringNativeClass;
	}

	const testModule::MotherStruct& getMotherStruct()
	{
		return _motherStruct;
	}

	void setMotherStruct( const testModule::MotherStruct& motherStruct )
	{
		_motherStruct = motherStruct;
	}

	// ------ testModule.IReferenceTypes Methods ------ //

	co::int32 getDummy()
	{
		return _dummy;
	}

	void setDummy( co::int32 dummy )
	{
		_dummy = dummy;
	}

	// ------ testModule.ISimpleTypes Methods ------ //

	double getStoredDouble()
	{
		return _storedDouble;
	}

	void setStoredDouble( double storedDouble )
	{
		_storedDouble = storedDouble;
	}

	co::Range<double const> getStoredDoubleList()
	{
		return _storedDoubleList;
	}

	void setStoredDoubleList( co::Range<double const> storedDoubleList )
	{
		co::assign( storedDoubleList, _storedDoubleList );
	}

	co::int32 getStoredInt()
	{
		return _storedInt;
	}

	void setStoredInt( co::int32 storedInt )
	{
		_storedInt = storedInt;
	}

	co::Range<co::int32 const> getStoredIntList()
	{
		return _storedIntList;
	}

	void setStoredIntList( co::Range<co::int32 const> storedIntList )
	{
		co::assign( storedIntList, _storedIntList );
	}

	const std::string& getStoredString()
	{
		return _storedString;
	}

	void setStoredString( const std::string& storedString )
	{
		_storedString = storedString;
	}

	co::Range<std::string const> getStoredStringList()
	{
		return _storedStringList;
	}

	void setStoredStringList( co::Range<std::string const> storedStringList )
	{
		co::assign( storedStringList, _storedStringList );
	}

	// -------------------- Methods --------------------- //

	const std::string& concatenateString( const std::string& str1, const std::string& str2 )
	{
		_storedString = str1;
		_storedString.append( str2 );
		return _storedString;
	}

	double divide( double dividend, double divisor )
	{
		return dividend / divisor;
	}

	co::Range<co::int32 const> get10Ints()
	{
		_storedIntList.clear();

		for( int i = 0; i < 10; i++ )
			_storedIntList.push_back( i );

		return _storedIntList;
	}

	co::Range<std::string const> getAlphabetList()
	{
		_storedStringList.clear();

		for( int i = 0; i < 24; i++ )
		{
			char letter[2];
			letter[0] = 65 + i;
			letter[1] = '\0';
			_storedStringList.push_back( letter );
		}

		return _storedStringList;
	}

	const std::string& getHelloString()
	{
		_storedString.assign( "Hello" );
		return _storedString;
	}

	double getNumber4Double()
	{
		return 4.0;
	}

	co::int32 getNumber4Int()
	{
		return 4;
	}

	co::Range<std::string const> getThirdElements( co::Range<std::string const> list1, co::Range<std::string const> list2 )
	{
		_storedStringList.clear();

		_storedStringList.push_back( list1[2] );
		_storedStringList.push_back( list2[2] );

		return _storedStringList;
	}

	co::int32 incrementInt( co::int32 number )
	{
		number++;
		return number;
	}

	co::Range<double const> mergeLists( co::Range<double const> list1, co::Range<double const> list2 )
	{
		_storedDoubleList.clear();

		co::assign( list1, _storedDoubleList );

		for( ; list2; list2.popFirst() )
		{
			_storedDoubleList.push_back( list2.getFirst() );
		}

		return _storedDoubleList;
	}

	void setDouble( double number )
	{
		_storedDouble = number;
	}

	void setInt( co::int32 number )
	{
		_storedInt = number;
	}

	void setIntList( co::Range<co::int32 const> intList )
	{
		co::assign( intList, _storedIntList );
	}

	void setStrList( co::Range<std::string const> strList )
	{
		co::assign( strList, _storedStringList );
	}

	void setString( const std::string& str )
	{
		_storedString = str;
	}

private:
	// member variables
	testModule::StringNativeClass _stringNativeClass;
	testModule::MotherStruct _motherStruct;
	co::int32 _dummy;
	double _storedDouble;
	std::vector<double> _storedDoubleList;
	co::int32 _storedInt;
	std::vector<co::int32> _storedIntList;
	std::string _storedString;
	std::vector<std::string> _storedStringList;
};

CORAL_EXPORT_COMPONENT( TestComponent, TestComponent );

} // namespace testModule
