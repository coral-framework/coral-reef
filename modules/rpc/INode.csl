/*
	\brief The main RPC interface.
		   Access remote objects and manage remote calls to local objects. 
		   
	Accessing remote objects is done by calling the accessor functions asynchronously.
	Providing remote access to local objects is done by starting a server and continuously updating.
	
	All local instances published (available for remote access) have an ID as long as they exist.
	As soon as the instance is destroyed, the ID will be freed and made available for reuse.
	The node has 2 ways of making an instance public, one is by receiving an existing local 
	object explicitly through this interface and publishing it through a "key", other is by receiving 
	a new instance request from a remote node and internally creating the requested instance.
*/
interface INode
{
	
	readonly string publicAddress;

	/*
		Finds an instance in \a address published with \a key. Returns null if not found.
	*/
	co.IObject getRemoteInstance( in string componentTypeName, in string key, in string address );
	
	/*
		Autodiscovers instances set to be autodiscoverrd with a \a key 
		over a local area network. It will try to discover instance for timeout time in milliseconds,
		after that time, it will return with discovered instances.
	*/
	void discoverRemoteInstances( in string componentTypeName, in string key, in uint32 timeout,
		inout co.IObject[] instances, inout rpc.INetworkNode[] networNodes );
	
	
	/*
		Blocking. Starts the barrier that will be available for all the nodes which this node
		has proxies for and blocks until the barrier is down. \a capacity the number of nodes 
		needed to hit the barrier down. Currently, only one barrier exists in a network at a given time.
	*/
	void raiseBarrier( in int32 capacity, in uint32 timeout );
	
	/*
		Enters the barrier, blocks until the barrier height has been reached.
	*/
	void hitBarrier( in uint32 timeout );
	
	/*
		Starts a local server which answer remote requests in the provided port.
		If boundAddress is set to "autodiscover", then this node is enable as auto discovered
		node and send location info using multicast on local network. Autodiscovery mode allows
		method discoverRemoteInstances() to be used.
		\throws ConnectionFailureException if Port is not available or if server has already been
		started. 
	*/
	void start( in string boundAddress );
	
	void stop();
	
	/*
		Updates the local server
	*/
	void update();
	
	/*
		Exposes a local instance to remote access through \a key key and returns the ID.
	*/
	int32 publishInstance( in co.IObject instance, in string key );
	
	/*
		Revoke acces to the given instance through the key. If there is no remote references to it,
		then the internal reference that the node has to it will be removed.
	*/
	void unpublishInstance( in string key );
	
	/*
		Gets an instance of \a instanceID id that is public and available to remote access.
	*/
	co.IObject getInstance( in int32 instanceID );
};
