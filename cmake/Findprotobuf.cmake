# Locate and configure the Google Protocol Buffers library.
#
# The following variables can be set and are optional:
#
#   PROTOBUF_SRC_ROOT_FOLDER - When compiling with MSVC, if this cache variable is set
#                              the protobuf-default VS project build locations
#                              (vsprojects/Debug & vsprojects/Release) will be searched
#                              for libraries and binaries.
#
# Defines the following variables:
#
#   PROTOBUF_FOUND - Found the Google Protocol Buffers library (libprotobuf & header files)
#   PROTOBUF_INCLUDE_DIRS - Include directories for Google Protocol Buffers
#   PROTOBUF_LIBRARIES - The protobuf libraries
# [New in CMake 2.8.5]
#   PROTOBUF_PROTOC_LIBRARIES - The protoc libraries
#   PROTOBUF_LITE_LIBRARIES - The protobuf-lite libraries
#
# The following cache variables are also available to set or use:
#   PROTOBUF_LIBRARY - The protobuf library
#   PROTOBUF_PROTOC_LIBRARY   - The protoc library
#   PROTOBUF_INCLUDE_DIR - The include directory for protocol buffers
#   PROTOBUF_PROTOC_EXECUTABLE - The protoc compiler
# [New in CMake 2.8.5]
#   PROTOBUF_LIBRARY_DEBUG - The protobuf library (debug)
#   PROTOBUF_PROTOC_LIBRARY_DEBUG   - The protoc library (debug)
#   PROTOBUF_LITE_LIBRARY - The protobuf lite library
#   PROTOBUF_LITE_LIBRARY_DEBUG - The protobuf lite library (debug)
#
#  ====================================================================
#  Example:
#
#   find_package(Protobuf REQUIRED)
#   include_directories(${PROTOBUF_INCLUDE_DIRS})
#
#   include_directories(${CMAKE_CURRENT_BINARY_DIR})
#   PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS foo.proto)
#   add_executable(bar bar.cc ${PROTO_SRCS} ${PROTO_HDRS})
#   target_link_libraries(bar ${PROTOBUF_LIBRARIES})
#
# NOTE: You may need to link against pthreads, depending
# on the platform.
#  ====================================================================
#
# PROTOBUF_GENERATE_CPP (public function)
#   SRCS = Variable to define with autogenerated
#          source files
#   HDRS = Variable to define with autogenerated
#          header files
#   ARGN = proto files
#
#  ====================================================================


#=============================================================================
# Copyright 2009 Kitware, Inc.
# Copyright 2009-2011 Philip Lowman <philip@yhbt.com>
# Copyright 2008 Esben Mose Hansen, Ange Optimization ApS
#
# Distributed under the OSI-approved BSD License (the "License");
# see accompanying file Copyright.txt for details.
#
# This software is distributed WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the License for more information.
#=============================================================================
# (To distribute this file outside of CMake, substitute the full
#  License text for the above reference.)

FUNCTION( PROTOBUF_GENERATE_CPP SRCS HDRS )
  if( NOT ARGN )
    message(SEND_ERROR "Error: PROTOBUF_GENERATE_CPP() called without any proto files")
    return()
  endif(NOT ARGN)

  if(PROTOBUF_GENERATE_CPP_APPEND_PATH)
    # Create an include path for each file specified
    foreach(FIL ${ARGN})
      get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
      get_filename_component(ABS_PATH ${ABS_FIL} PATH)
      list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)
      if(${_contains_already} EQUAL -1)
          list(APPEND _protobuf_include_path -I ${ABS_PATH})
      endif()
    endforeach()
  else()
    set(_protobuf_include_path -I ${CMAKE_CURRENT_SOURCE_DIR})
  endif()

  set(${SRCS})
  set(${HDRS})
  foreach(FIL ${ARGN})
    get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
    get_filename_component(FIL_WE ${FIL} NAME_WE)
    
    list(APPEND ${SRCS} "${CMAKE_CURRENT_BINARY_DIR}/${FIL_WE}.pb.cc")
    list(APPEND ${HDRS} "${CMAKE_CURRENT_BINARY_DIR}/${FIL_WE}.pb.h")

    add_custom_command(
      OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${FIL_WE}.pb.cc"
             "${CMAKE_CURRENT_BINARY_DIR}/${FIL_WE}.pb.h"
      COMMAND  ${PROTOBUF_PROTOC_EXECUTABLE}
      ARGS --cpp_out  ${CMAKE_CURRENT_BINARY_DIR} ${_protobuf_include_path} ${ABS_FIL}
      DEPENDS ${ABS_FIL}
      COMMENT "Running C++ protocol buffer compiler on ${FIL}"
      VERBATIM )
  endforeach()

  set_source_files_properties(${${SRCS}} ${${HDRS}} PROPERTIES GENERATED TRUE)
  set(${SRCS} ${${SRCS}} PARENT_SCOPE)
  set(${HDRS} ${${HDRS}} PARENT_SCOPE)
endfunction()

# Internal function: search for normal library as well as a debug one
# if the debug one is specified also include debug/optimized keywords in *_LIBRARIES variable
FUNCTION( _protobuf_find_libraries name filename )
	FIND_LIBRARY( ${name}_LIBRARY
       NAMES 
			${filename}
       PATHS 
			${PROTOBUF_SRC_ROOT_FOLDER}/vsprojects/Release
			${PROTOBUF_SRC_ROOT_FOLDER}/lib/release
			${PROTOBUF_SRC_ROOT_FOLDER}/lib
			NO_DEFAULT_PATH
	)
   MARK_AS_ADVANCED( ${name}_LIBRARY )

   FIND_LIBRARY( ${name}_LIBRARY_DEBUG
       NAMES 
			${filename}
       PATHS 
			${PROTOBUF_SRC_ROOT_FOLDER}/vsprojects/Debug
			${PROTOBUF_SRC_ROOT_FOLDER}/lib/debug
			${PROTOBUF_SRC_ROOT_FOLDER}/lib
			NO_DEFAULT_PATH
	)
	MARK_AS_ADVANCED( ${name}_LIBRARY_DEBUG )
	
	IF( NOT ${name}_LIBRARY_DEBUG )
		# There is no debug library
		SET( ${name}_LIBRARY_DEBUG ${${name}_LIBRARY} PARENT_SCOPE )
		SET( ${name}_LIBRARIES     ${${name}_LIBRARY} PARENT_SCOPE )
	ELSE()
		# There IS a debug library
		SET( ${name}_LIBRARIES
			optimized ${${name}_LIBRARY}
			debug     ${${name}_LIBRARY_DEBUG}
			PARENT_SCOPE
		)
	ENDIF()
ENDFUNCTION()

#######################################
# Main.
#######################################

# By default have PROTOBUF_GENERATE_CPP macro pass -I to protoc for each directory where a proto file is referenced.
IF( NOT DEFINED PROTOBUF_GENERATE_CPP_APPEND_PATH )
  SET( PROTOBUF_GENERATE_CPP_APPEND_PATH TRUE )
ENDIF()

# Google's provided vcproj files generate libraries with a "lib" prefix on Windows
IF( MSVC )
    SET( PROTOBUF_ORIG_FIND_LIBRARY_PREFIXES "${CMAKE_FIND_LIBRARY_PREFIXES}" )
    SET( CMAKE_FIND_LIBRARY_PREFIXES "lib" "" )

    SET( PROTOBUF_SRC_ROOT_FOLDER $ENV{PROTOBUF_ROOT} )
ENDIF()

# The Protobuf library
_protobuf_find_libraries( PROTOBUF protobuf )
_protobuf_find_libraries( PROTOBUF_LITE protobuf-lite )
_protobuf_find_libraries( PROTOBUF_PROTOC protoc )

# Restore original find library prefixes
IF( MSVC )
    SET( CMAKE_FIND_LIBRARY_PREFIXES "${PROTOBUF_ORIG_FIND_LIBRARY_PREFIXES}" )
ENDIF()

# Find the include directory
FIND_PATH( PROTOBUF_INCLUDE_DIR
	NAMES
		google/protobuf/service.h
    PATHS 
		${PROTOBUF_SRC_ROOT_FOLDER}/src
		${PROTOBUF_SRC_ROOT_FOLDER}/include
)
MARK_AS_ADVANCED( PROTOBUF_INCLUDE_DIR )

# Find the protoc Executable
FIND_PROGRAM( PROTOBUF_PROTOC_EXECUTABLE
    NAMES 
		protoc
    DOC 
		"The Google Protocol Buffers Compiler"
    PATHS
		${PROTOBUF_SRC_ROOT_FOLDER}/vsprojects/Release
		${PROTOBUF_SRC_ROOT_FOLDER}/vsprojects/Debug
		${PROTOBUF_SRC_ROOT_FOLDER}/bin
		${PROTOBUF_SRC_ROOT_FOLDER}/bin/Release
		${PROTOBUF_SRC_ROOT_FOLDER}/bin/Debug
)
MARK_AS_ADVANCED( PROTOBUF_PROTOC_EXECUTABLE )

FIND_PACKAGE( PackageHandleStandardArgs REQUIRED )
FIND_PACKAGE_HANDLE_STANDARD_ARGS( PROTOBUF REQUIRED_VARS PROTOBUF_INCLUDE_DIR PROTOBUF_LIBRARY )

IF( PROTOBUF_FOUND )
    SET( PROTOBUF_INCLUDE_DIRS ${PROTOBUF_INCLUDE_DIR} )
ENDIF()
